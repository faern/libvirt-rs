/* automatically generated by rust-bindgen */

use core::option::Option;

pub const LIBVIR_VERSION_NUMBER: u32 = 5006000;
pub const VIR_TYPED_PARAM_FIELD_LENGTH: u32 = 80;
pub const VIR_SECURITY_LABEL_BUFLEN: u32 = 4097;
pub const VIR_SECURITY_MODEL_BUFLEN: u32 = 257;
pub const VIR_SECURITY_DOI_BUFLEN: u32 = 257;
pub const VIR_NODE_CPU_STATS_FIELD_LENGTH: u32 = 80;
pub const VIR_NODE_CPU_STATS_KERNEL: &'static [u8; 7usize] = b"kernel\0";
pub const VIR_NODE_CPU_STATS_USER: &'static [u8; 5usize] = b"user\0";
pub const VIR_NODE_CPU_STATS_IDLE: &'static [u8; 5usize] = b"idle\0";
pub const VIR_NODE_CPU_STATS_IOWAIT: &'static [u8; 7usize] = b"iowait\0";
pub const VIR_NODE_CPU_STATS_INTR: &'static [u8; 5usize] = b"intr\0";
pub const VIR_NODE_CPU_STATS_UTILIZATION: &'static [u8; 12usize] = b"utilization\0";
pub const VIR_NODE_MEMORY_STATS_FIELD_LENGTH: u32 = 80;
pub const VIR_NODE_MEMORY_STATS_TOTAL: &'static [u8; 6usize] = b"total\0";
pub const VIR_NODE_MEMORY_STATS_FREE: &'static [u8; 5usize] = b"free\0";
pub const VIR_NODE_MEMORY_STATS_BUFFERS: &'static [u8; 8usize] = b"buffers\0";
pub const VIR_NODE_MEMORY_STATS_CACHED: &'static [u8; 7usize] = b"cached\0";
pub const VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN: &'static [u8; 18usize] = b"shm_pages_to_scan\0";
pub const VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS: &'static [u8; 20usize] = b"shm_sleep_millisecs\0";
pub const VIR_NODE_MEMORY_SHARED_PAGES_SHARED: &'static [u8; 17usize] = b"shm_pages_shared\0";
pub const VIR_NODE_MEMORY_SHARED_PAGES_SHARING: &'static [u8; 18usize] = b"shm_pages_sharing\0";
pub const VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED: &'static [u8; 19usize] = b"shm_pages_unshared\0";
pub const VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE: &'static [u8; 19usize] = b"shm_pages_volatile\0";
pub const VIR_NODE_MEMORY_SHARED_FULL_SCANS: &'static [u8; 15usize] = b"shm_full_scans\0";
pub const VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES: &'static [u8; 23usize] =
    b"shm_merge_across_nodes\0";
pub const VIR_NODE_SEV_PDH: &'static [u8; 4usize] = b"pdh\0";
pub const VIR_NODE_SEV_CERT_CHAIN: &'static [u8; 11usize] = b"cert-chain\0";
pub const VIR_NODE_SEV_CBITPOS: &'static [u8; 8usize] = b"cbitpos\0";
pub const VIR_NODE_SEV_REDUCED_PHYS_BITS: &'static [u8; 18usize] = b"reduced-phys-bits\0";
pub const VIR_UUID_BUFLEN: u32 = 16;
pub const VIR_UUID_STRING_BUFLEN: u32 = 37;
pub const VIR_DOMAIN_SCHEDULER_CPU_SHARES: &'static [u8; 11usize] = b"cpu_shares\0";
pub const VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD: &'static [u8; 14usize] = b"global_period\0";
pub const VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA: &'static [u8; 13usize] = b"global_quota\0";
pub const VIR_DOMAIN_SCHEDULER_VCPU_PERIOD: &'static [u8; 12usize] = b"vcpu_period\0";
pub const VIR_DOMAIN_SCHEDULER_VCPU_QUOTA: &'static [u8; 11usize] = b"vcpu_quota\0";
pub const VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD: &'static [u8; 16usize] = b"emulator_period\0";
pub const VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA: &'static [u8; 15usize] = b"emulator_quota\0";
pub const VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD: &'static [u8; 16usize] = b"iothread_period\0";
pub const VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA: &'static [u8; 15usize] = b"iothread_quota\0";
pub const VIR_DOMAIN_SCHEDULER_WEIGHT: &'static [u8; 7usize] = b"weight\0";
pub const VIR_DOMAIN_SCHEDULER_CAP: &'static [u8; 4usize] = b"cap\0";
pub const VIR_DOMAIN_SCHEDULER_RESERVATION: &'static [u8; 12usize] = b"reservation\0";
pub const VIR_DOMAIN_SCHEDULER_LIMIT: &'static [u8; 6usize] = b"limit\0";
pub const VIR_DOMAIN_SCHEDULER_SHARES: &'static [u8; 7usize] = b"shares\0";
pub const VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH: u32 = 80;
pub const VIR_DOMAIN_BLOCK_STATS_READ_BYTES: &'static [u8; 9usize] = b"rd_bytes\0";
pub const VIR_DOMAIN_BLOCK_STATS_READ_REQ: &'static [u8; 14usize] = b"rd_operations\0";
pub const VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES: &'static [u8; 15usize] = b"rd_total_times\0";
pub const VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES: &'static [u8; 9usize] = b"wr_bytes\0";
pub const VIR_DOMAIN_BLOCK_STATS_WRITE_REQ: &'static [u8; 14usize] = b"wr_operations\0";
pub const VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES: &'static [u8; 15usize] = b"wr_total_times\0";
pub const VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ: &'static [u8; 17usize] = b"flush_operations\0";
pub const VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES: &'static [u8; 18usize] = b"flush_total_times\0";
pub const VIR_DOMAIN_BLOCK_STATS_ERRS: &'static [u8; 5usize] = b"errs\0";
pub const VIR_MIGRATE_PARAM_URI: &'static [u8; 12usize] = b"migrate_uri\0";
pub const VIR_MIGRATE_PARAM_DEST_NAME: &'static [u8; 17usize] = b"destination_name\0";
pub const VIR_MIGRATE_PARAM_DEST_XML: &'static [u8; 16usize] = b"destination_xml\0";
pub const VIR_MIGRATE_PARAM_PERSIST_XML: &'static [u8; 15usize] = b"persistent_xml\0";
pub const VIR_MIGRATE_PARAM_BANDWIDTH: &'static [u8; 10usize] = b"bandwidth\0";
pub const VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY: &'static [u8; 19usize] = b"bandwidth.postcopy\0";
pub const VIR_MIGRATE_PARAM_GRAPHICS_URI: &'static [u8; 13usize] = b"graphics_uri\0";
pub const VIR_MIGRATE_PARAM_LISTEN_ADDRESS: &'static [u8; 15usize] = b"listen_address\0";
pub const VIR_MIGRATE_PARAM_MIGRATE_DISKS: &'static [u8; 14usize] = b"migrate_disks\0";
pub const VIR_MIGRATE_PARAM_DISKS_PORT: &'static [u8; 11usize] = b"disks_port\0";
pub const VIR_MIGRATE_PARAM_COMPRESSION: &'static [u8; 12usize] = b"compression\0";
pub const VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL: &'static [u8; 21usize] =
    b"compression.mt.level\0";
pub const VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS: &'static [u8; 23usize] =
    b"compression.mt.threads\0";
pub const VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS: &'static [u8; 24usize] =
    b"compression.mt.dthreads\0";
pub const VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE: &'static [u8; 25usize] =
    b"compression.xbzrle.cache\0";
pub const VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL: &'static [u8; 22usize] =
    b"auto_converge.initial\0";
pub const VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT: &'static [u8; 24usize] =
    b"auto_converge.increment\0";
pub const VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS: &'static [u8; 21usize] =
    b"parallel.connections\0";
pub const VIR_DOMAIN_CPU_STATS_CPUTIME: &'static [u8; 9usize] = b"cpu_time\0";
pub const VIR_DOMAIN_CPU_STATS_USERTIME: &'static [u8; 10usize] = b"user_time\0";
pub const VIR_DOMAIN_CPU_STATS_SYSTEMTIME: &'static [u8; 12usize] = b"system_time\0";
pub const VIR_DOMAIN_CPU_STATS_VCPUTIME: &'static [u8; 10usize] = b"vcpu_time\0";
pub const VIR_DOMAIN_BLKIO_WEIGHT: &'static [u8; 7usize] = b"weight\0";
pub const VIR_DOMAIN_BLKIO_DEVICE_WEIGHT: &'static [u8; 14usize] = b"device_weight\0";
pub const VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS: &'static [u8; 21usize] = b"device_read_iops_sec\0";
pub const VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS: &'static [u8; 22usize] = b"device_write_iops_sec\0";
pub const VIR_DOMAIN_BLKIO_DEVICE_READ_BPS: &'static [u8; 22usize] = b"device_read_bytes_sec\0";
pub const VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS: &'static [u8; 23usize] = b"device_write_bytes_sec\0";
pub const VIR_DOMAIN_MEMORY_PARAM_UNLIMITED: u64 = 9007199254740991;
pub const VIR_DOMAIN_MEMORY_HARD_LIMIT: &'static [u8; 11usize] = b"hard_limit\0";
pub const VIR_DOMAIN_MEMORY_SOFT_LIMIT: &'static [u8; 11usize] = b"soft_limit\0";
pub const VIR_DOMAIN_MEMORY_MIN_GUARANTEE: &'static [u8; 14usize] = b"min_guarantee\0";
pub const VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT: &'static [u8; 16usize] = b"swap_hard_limit\0";
pub const VIR_DOMAIN_NUMA_NODESET: &'static [u8; 13usize] = b"numa_nodeset\0";
pub const VIR_DOMAIN_NUMA_MODE: &'static [u8; 10usize] = b"numa_mode\0";
pub const VIR_DOMAIN_BANDWIDTH_IN_AVERAGE: &'static [u8; 16usize] = b"inbound.average\0";
pub const VIR_DOMAIN_BANDWIDTH_IN_PEAK: &'static [u8; 13usize] = b"inbound.peak\0";
pub const VIR_DOMAIN_BANDWIDTH_IN_BURST: &'static [u8; 14usize] = b"inbound.burst\0";
pub const VIR_DOMAIN_BANDWIDTH_IN_FLOOR: &'static [u8; 14usize] = b"inbound.floor\0";
pub const VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE: &'static [u8; 17usize] = b"outbound.average\0";
pub const VIR_DOMAIN_BANDWIDTH_OUT_PEAK: &'static [u8; 14usize] = b"outbound.peak\0";
pub const VIR_DOMAIN_BANDWIDTH_OUT_BURST: &'static [u8; 15usize] = b"outbound.burst\0";
pub const VIR_DOMAIN_IOTHREAD_POLL_MAX_NS: &'static [u8; 12usize] = b"poll_max_ns\0";
pub const VIR_DOMAIN_IOTHREAD_POLL_GROW: &'static [u8; 10usize] = b"poll_grow\0";
pub const VIR_DOMAIN_IOTHREAD_POLL_SHRINK: &'static [u8; 12usize] = b"poll_shrink\0";
pub const VIR_PERF_PARAM_CMT: &'static [u8; 4usize] = b"cmt\0";
pub const VIR_PERF_PARAM_MBMT: &'static [u8; 5usize] = b"mbmt\0";
pub const VIR_PERF_PARAM_MBML: &'static [u8; 5usize] = b"mbml\0";
pub const VIR_PERF_PARAM_CACHE_MISSES: &'static [u8; 13usize] = b"cache_misses\0";
pub const VIR_PERF_PARAM_CACHE_REFERENCES: &'static [u8; 17usize] = b"cache_references\0";
pub const VIR_PERF_PARAM_INSTRUCTIONS: &'static [u8; 13usize] = b"instructions\0";
pub const VIR_PERF_PARAM_CPU_CYCLES: &'static [u8; 11usize] = b"cpu_cycles\0";
pub const VIR_PERF_PARAM_BRANCH_INSTRUCTIONS: &'static [u8; 20usize] = b"branch_instructions\0";
pub const VIR_PERF_PARAM_BRANCH_MISSES: &'static [u8; 14usize] = b"branch_misses\0";
pub const VIR_PERF_PARAM_BUS_CYCLES: &'static [u8; 11usize] = b"bus_cycles\0";
pub const VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND: &'static [u8; 24usize] =
    b"stalled_cycles_frontend\0";
pub const VIR_PERF_PARAM_STALLED_CYCLES_BACKEND: &'static [u8; 23usize] =
    b"stalled_cycles_backend\0";
pub const VIR_PERF_PARAM_REF_CPU_CYCLES: &'static [u8; 15usize] = b"ref_cpu_cycles\0";
pub const VIR_PERF_PARAM_CPU_CLOCK: &'static [u8; 10usize] = b"cpu_clock\0";
pub const VIR_PERF_PARAM_TASK_CLOCK: &'static [u8; 11usize] = b"task_clock\0";
pub const VIR_PERF_PARAM_PAGE_FAULTS: &'static [u8; 12usize] = b"page_faults\0";
pub const VIR_PERF_PARAM_CONTEXT_SWITCHES: &'static [u8; 17usize] = b"context_switches\0";
pub const VIR_PERF_PARAM_CPU_MIGRATIONS: &'static [u8; 15usize] = b"cpu_migrations\0";
pub const VIR_PERF_PARAM_PAGE_FAULTS_MIN: &'static [u8; 16usize] = b"page_faults_min\0";
pub const VIR_PERF_PARAM_PAGE_FAULTS_MAJ: &'static [u8; 16usize] = b"page_faults_maj\0";
pub const VIR_PERF_PARAM_ALIGNMENT_FAULTS: &'static [u8; 17usize] = b"alignment_faults\0";
pub const VIR_PERF_PARAM_EMULATION_FAULTS: &'static [u8; 17usize] = b"emulation_faults\0";
pub const VIR_DOMAIN_BLOCK_COPY_BANDWIDTH: &'static [u8; 10usize] = b"bandwidth\0";
pub const VIR_DOMAIN_BLOCK_COPY_GRANULARITY: &'static [u8; 12usize] = b"granularity\0";
pub const VIR_DOMAIN_BLOCK_COPY_BUF_SIZE: &'static [u8; 9usize] = b"buf-size\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC: &'static [u8; 16usize] = b"total_bytes_sec\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC: &'static [u8; 15usize] = b"read_bytes_sec\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC: &'static [u8; 16usize] = b"write_bytes_sec\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC: &'static [u8; 15usize] = b"total_iops_sec\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC: &'static [u8; 14usize] = b"read_iops_sec\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC: &'static [u8; 15usize] = b"write_iops_sec\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX: &'static [u8; 20usize] =
    b"total_bytes_sec_max\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX: &'static [u8; 19usize] =
    b"read_bytes_sec_max\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX: &'static [u8; 20usize] =
    b"write_bytes_sec_max\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX: &'static [u8; 19usize] =
    b"total_iops_sec_max\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX: &'static [u8; 18usize] =
    b"read_iops_sec_max\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX: &'static [u8; 19usize] =
    b"write_iops_sec_max\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH: &'static [u8; 27usize] =
    b"total_bytes_sec_max_length\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH: &'static [u8; 26usize] =
    b"read_bytes_sec_max_length\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH: &'static [u8; 27usize] =
    b"write_bytes_sec_max_length\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH: &'static [u8; 26usize] =
    b"total_iops_sec_max_length\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH: &'static [u8; 25usize] =
    b"read_iops_sec_max_length\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH: &'static [u8; 26usize] =
    b"write_iops_sec_max_length\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC: &'static [u8; 14usize] = b"size_iops_sec\0";
pub const VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME: &'static [u8; 11usize] = b"group_name\0";
pub const VIR_DOMAIN_SEND_KEY_MAX_KEYS: u32 = 16;
pub const VIR_DOMAIN_JOB_OPERATION: &'static [u8; 10usize] = b"operation\0";
pub const VIR_DOMAIN_JOB_TIME_ELAPSED: &'static [u8; 13usize] = b"time_elapsed\0";
pub const VIR_DOMAIN_JOB_TIME_ELAPSED_NET: &'static [u8; 17usize] = b"time_elapsed_net\0";
pub const VIR_DOMAIN_JOB_TIME_REMAINING: &'static [u8; 15usize] = b"time_remaining\0";
pub const VIR_DOMAIN_JOB_DOWNTIME: &'static [u8; 9usize] = b"downtime\0";
pub const VIR_DOMAIN_JOB_DOWNTIME_NET: &'static [u8; 13usize] = b"downtime_net\0";
pub const VIR_DOMAIN_JOB_SETUP_TIME: &'static [u8; 11usize] = b"setup_time\0";
pub const VIR_DOMAIN_JOB_DATA_TOTAL: &'static [u8; 11usize] = b"data_total\0";
pub const VIR_DOMAIN_JOB_DATA_PROCESSED: &'static [u8; 15usize] = b"data_processed\0";
pub const VIR_DOMAIN_JOB_DATA_REMAINING: &'static [u8; 15usize] = b"data_remaining\0";
pub const VIR_DOMAIN_JOB_MEMORY_TOTAL: &'static [u8; 13usize] = b"memory_total\0";
pub const VIR_DOMAIN_JOB_MEMORY_PROCESSED: &'static [u8; 17usize] = b"memory_processed\0";
pub const VIR_DOMAIN_JOB_MEMORY_REMAINING: &'static [u8; 17usize] = b"memory_remaining\0";
pub const VIR_DOMAIN_JOB_MEMORY_CONSTANT: &'static [u8; 16usize] = b"memory_constant\0";
pub const VIR_DOMAIN_JOB_MEMORY_NORMAL: &'static [u8; 14usize] = b"memory_normal\0";
pub const VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES: &'static [u8; 20usize] = b"memory_normal_bytes\0";
pub const VIR_DOMAIN_JOB_MEMORY_BPS: &'static [u8; 11usize] = b"memory_bps\0";
pub const VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE: &'static [u8; 18usize] = b"memory_dirty_rate\0";
pub const VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE: &'static [u8; 17usize] = b"memory_page_size\0";
pub const VIR_DOMAIN_JOB_MEMORY_ITERATION: &'static [u8; 17usize] = b"memory_iteration\0";
pub const VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS: &'static [u8; 25usize] =
    b"memory_postcopy_requests\0";
pub const VIR_DOMAIN_JOB_DISK_TOTAL: &'static [u8; 11usize] = b"disk_total\0";
pub const VIR_DOMAIN_JOB_DISK_PROCESSED: &'static [u8; 15usize] = b"disk_processed\0";
pub const VIR_DOMAIN_JOB_DISK_REMAINING: &'static [u8; 15usize] = b"disk_remaining\0";
pub const VIR_DOMAIN_JOB_DISK_BPS: &'static [u8; 9usize] = b"disk_bps\0";
pub const VIR_DOMAIN_JOB_COMPRESSION_CACHE: &'static [u8; 18usize] = b"compression_cache\0";
pub const VIR_DOMAIN_JOB_COMPRESSION_BYTES: &'static [u8; 18usize] = b"compression_bytes\0";
pub const VIR_DOMAIN_JOB_COMPRESSION_PAGES: &'static [u8; 18usize] = b"compression_pages\0";
pub const VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES: &'static [u8; 25usize] =
    b"compression_cache_misses\0";
pub const VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW: &'static [u8; 21usize] = b"compression_overflow\0";
pub const VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE: &'static [u8; 23usize] =
    b"auto_converge_throttle\0";
pub const VIR_DOMAIN_TUNABLE_CPU_VCPUPIN: &'static [u8; 18usize] = b"cputune.vcpupin%u\0";
pub const VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN: &'static [u8; 20usize] = b"cputune.emulatorpin\0";
pub const VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN: &'static [u8; 22usize] = b"cputune.iothreadpin%u\0";
pub const VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES: &'static [u8; 19usize] = b"cputune.cpu_shares\0";
pub const VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD: &'static [u8; 22usize] = b"cputune.global_period\0";
pub const VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA: &'static [u8; 21usize] = b"cputune.global_quota\0";
pub const VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD: &'static [u8; 20usize] = b"cputune.vcpu_period\0";
pub const VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA: &'static [u8; 19usize] = b"cputune.vcpu_quota\0";
pub const VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD: &'static [u8; 24usize] =
    b"cputune.emulator_period\0";
pub const VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA: &'static [u8; 23usize] =
    b"cputune.emulator_quota\0";
pub const VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD: &'static [u8; 24usize] =
    b"cputune.iothread_period\0";
pub const VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA: &'static [u8; 23usize] =
    b"cputune.iothread_quota\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_DISK: &'static [u8; 18usize] = b"blkdeviotune.disk\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC: &'static [u8; 29usize] =
    b"blkdeviotune.total_bytes_sec\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC: &'static [u8; 28usize] =
    b"blkdeviotune.read_bytes_sec\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC: &'static [u8; 29usize] =
    b"blkdeviotune.write_bytes_sec\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC: &'static [u8; 28usize] =
    b"blkdeviotune.total_iops_sec\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC: &'static [u8; 27usize] =
    b"blkdeviotune.read_iops_sec\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC: &'static [u8; 28usize] =
    b"blkdeviotune.write_iops_sec\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX: &'static [u8; 33usize] =
    b"blkdeviotune.total_bytes_sec_max\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX: &'static [u8; 32usize] =
    b"blkdeviotune.read_bytes_sec_max\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX: &'static [u8; 33usize] =
    b"blkdeviotune.write_bytes_sec_max\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX: &'static [u8; 32usize] =
    b"blkdeviotune.total_iops_sec_max\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX: &'static [u8; 31usize] =
    b"blkdeviotune.read_iops_sec_max\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX: &'static [u8; 32usize] =
    b"blkdeviotune.write_iops_sec_max\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC: &'static [u8; 27usize] =
    b"blkdeviotune.size_iops_sec\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME: &'static [u8; 24usize] =
    b"blkdeviotune.group_name\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH: &'static [u8; 40usize] =
    b"blkdeviotune.total_bytes_sec_max_length\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH: &'static [u8; 39usize] =
    b"blkdeviotune.read_bytes_sec_max_length\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH: &'static [u8; 40usize] =
    b"blkdeviotune.write_bytes_sec_max_length\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH: &'static [u8; 39usize] =
    b"blkdeviotune.total_iops_sec_max_length\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH: &'static [u8; 38usize] =
    b"blkdeviotune.read_iops_sec_max_length\0";
pub const VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH: &'static [u8; 39usize] =
    b"blkdeviotune.write_iops_sec_max_length\0";
pub const VIR_DOMAIN_SCHED_FIELD_LENGTH: u32 = 80;
pub const VIR_DOMAIN_BLKIO_FIELD_LENGTH: u32 = 80;
pub const VIR_DOMAIN_MEMORY_FIELD_LENGTH: u32 = 80;
pub const VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT: &'static [u8; 16usize] = b"sev-measurement\0";
pub const VIR_NETWORK_PORT_BANDWIDTH_IN_AVERAGE: &'static [u8; 16usize] = b"inbound.average\0";
pub const VIR_NETWORK_PORT_BANDWIDTH_IN_PEAK: &'static [u8; 13usize] = b"inbound.peak\0";
pub const VIR_NETWORK_PORT_BANDWIDTH_IN_BURST: &'static [u8; 14usize] = b"inbound.burst\0";
pub const VIR_NETWORK_PORT_BANDWIDTH_IN_FLOOR: &'static [u8; 14usize] = b"inbound.floor\0";
pub const VIR_NETWORK_PORT_BANDWIDTH_OUT_AVERAGE: &'static [u8; 17usize] = b"outbound.average\0";
pub const VIR_NETWORK_PORT_BANDWIDTH_OUT_PEAK: &'static [u8; 14usize] = b"outbound.peak\0";
pub const VIR_NETWORK_PORT_BANDWIDTH_OUT_BURST: &'static [u8; 15usize] = b"outbound.burst\0";
pub type virFreeCallback = Option<unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void)>;
pub const VIR_CONNECT_CLOSE_REASON_ERROR: virConnectCloseReason = 0;
pub const VIR_CONNECT_CLOSE_REASON_EOF: virConnectCloseReason = 1;
pub const VIR_CONNECT_CLOSE_REASON_KEEPALIVE: virConnectCloseReason = 2;
pub const VIR_CONNECT_CLOSE_REASON_CLIENT: virConnectCloseReason = 3;
pub type virConnectCloseReason = u32;
pub const VIR_TYPED_PARAM_INT: virTypedParameterType = 1;
pub const VIR_TYPED_PARAM_UINT: virTypedParameterType = 2;
pub const VIR_TYPED_PARAM_LLONG: virTypedParameterType = 3;
pub const VIR_TYPED_PARAM_ULLONG: virTypedParameterType = 4;
pub const VIR_TYPED_PARAM_DOUBLE: virTypedParameterType = 5;
pub const VIR_TYPED_PARAM_BOOLEAN: virTypedParameterType = 6;
pub const VIR_TYPED_PARAM_STRING: virTypedParameterType = 7;
pub type virTypedParameterType = u32;
pub const VIR_TYPED_PARAM_STRING_OKAY: virTypedParameterFlags = 4;
pub type virTypedParameterFlags = u32;
pub type virTypedParameter = _virTypedParameter;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _virTypedParameter {
    pub field: [::std::os::raw::c_char; 80usize],
    pub type_: ::std::os::raw::c_int,
    pub value: _virTypedParameter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _virTypedParameter__bindgen_ty_1 {
    pub i: ::std::os::raw::c_int,
    pub ui: ::std::os::raw::c_uint,
    pub l: ::std::os::raw::c_longlong,
    pub ul: ::std::os::raw::c_ulonglong,
    pub d: f64,
    pub b: ::std::os::raw::c_char,
    pub s: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
pub type virTypedParameterPtr = *mut virTypedParameter;
extern "C" {
    pub fn virTypedParamsGet(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> virTypedParameterPtr;

    pub fn virTypedParamsGetInt(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsGetUInt(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsGetLLong(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsGetULLong(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsGetDouble(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut f64,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsGetBoolean(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsGetString(
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddInt(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddUInt(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddLLong(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddULLong(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddDouble(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddBoolean(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddString(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddStringList(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        values: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsAddFromString(
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        maxparams: *mut ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virTypedParamsClear(params: virTypedParameterPtr, nparams: ::std::os::raw::c_int);

    pub fn virTypedParamsFree(params: virTypedParameterPtr, nparams: ::std::os::raw::c_int);
}
#[repr(C)]
pub struct _virConnect(::std::os::raw::c_void);

pub type virConnect = _virConnect;
pub type virConnectPtr = *mut virConnect;
pub const VIR_NODE_SUSPEND_TARGET_MEM: virNodeSuspendTarget = 0;
pub const VIR_NODE_SUSPEND_TARGET_DISK: virNodeSuspendTarget = 1;
pub const VIR_NODE_SUSPEND_TARGET_HYBRID: virNodeSuspendTarget = 2;
pub type virNodeSuspendTarget = u32;
#[repr(C)]
pub struct _virStream(::std::os::raw::c_void);

pub type virStream = _virStream;
pub type virStreamPtr = *mut virStream;
pub type virSecurityLabel = _virSecurityLabel;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _virSecurityLabel {
    pub label: [::std::os::raw::c_char; 4097usize],
    pub enforcing: ::std::os::raw::c_int,
}
pub type virSecurityLabelPtr = *mut virSecurityLabel;
pub type virSecurityModel = _virSecurityModel;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _virSecurityModel {
    pub model: [::std::os::raw::c_char; 257usize],
    pub doi: [::std::os::raw::c_char; 257usize],
}
pub type virSecurityModelPtr = *mut virSecurityModel;
pub type virNodeInfo = _virNodeInfo;
#[repr(C)]
pub struct _virNodeInfo {
    pub model: [::std::os::raw::c_char; 32usize],
    pub memory: ::std::os::raw::c_ulong,
    pub cpus: ::std::os::raw::c_uint,
    pub mhz: ::std::os::raw::c_uint,
    pub nodes: ::std::os::raw::c_uint,
    pub sockets: ::std::os::raw::c_uint,
    pub cores: ::std::os::raw::c_uint,
    pub threads: ::std::os::raw::c_uint,
}
pub const VIR_NODE_CPU_STATS_ALL_CPUS: virNodeGetCPUStatsAllCPUs = -1;
pub type virNodeGetCPUStatsAllCPUs = i32;
pub type virNodeCPUStats = _virNodeCPUStats;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _virNodeCPUStats {
    pub field: [::std::os::raw::c_char; 80usize],
    pub value: ::std::os::raw::c_ulonglong,
}
pub const VIR_NODE_MEMORY_STATS_ALL_CELLS: virNodeGetMemoryStatsAllCells = -1;
pub type virNodeGetMemoryStatsAllCells = i32;
pub type virNodeMemoryStats = _virNodeMemoryStats;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _virNodeMemoryStats {
    pub field: [::std::os::raw::c_char; 80usize],
    pub value: ::std::os::raw::c_ulonglong,
}
extern "C" {
    pub fn virNodeGetMemoryParameters(
        conn: virConnectPtr,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeSetMemoryParameters(
        conn: virConnectPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeGetCPUMap(
        conn: virConnectPtr,
        cpumap: *mut *mut ::std::os::raw::c_uchar,
        online: *mut ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virNodeInfoPtr = *mut virNodeInfo;
pub type virNodeCPUStatsPtr = *mut virNodeCPUStats;
pub type virNodeMemoryStatsPtr = *mut virNodeMemoryStats;
extern "C" {
    pub fn virNodeGetSEVInfo(
        conn: virConnectPtr,
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_RO: virConnectFlags = 1;
pub const VIR_CONNECT_NO_ALIASES: virConnectFlags = 2;
pub type virConnectFlags = u32;
pub const VIR_CRED_USERNAME: virConnectCredentialType = 1;
pub const VIR_CRED_AUTHNAME: virConnectCredentialType = 2;
pub const VIR_CRED_LANGUAGE: virConnectCredentialType = 3;
pub const VIR_CRED_CNONCE: virConnectCredentialType = 4;
pub const VIR_CRED_PASSPHRASE: virConnectCredentialType = 5;
pub const VIR_CRED_ECHOPROMPT: virConnectCredentialType = 6;
pub const VIR_CRED_NOECHOPROMPT: virConnectCredentialType = 7;
pub const VIR_CRED_REALM: virConnectCredentialType = 8;
pub const VIR_CRED_EXTERNAL: virConnectCredentialType = 9;
pub type virConnectCredentialType = u32;
#[repr(C)]
pub struct _virConnectCredential {
    pub type_: ::std::os::raw::c_int,
    pub prompt: *const ::std::os::raw::c_char,
    pub challenge: *const ::std::os::raw::c_char,
    pub defresult: *const ::std::os::raw::c_char,
    pub result: *mut ::std::os::raw::c_char,
    pub resultlen: ::std::os::raw::c_uint,
}
pub type virConnectCredential = _virConnectCredential;
pub type virConnectCredentialPtr = *mut virConnectCredential;
pub type virConnectAuthCallbackPtr = Option<
    unsafe extern "C" fn(
        cred: virConnectCredentialPtr,
        ncred: ::std::os::raw::c_uint,
        cbdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
pub struct _virConnectAuth {
    pub credtype: *mut ::std::os::raw::c_int,
    pub ncredtype: ::std::os::raw::c_uint,
    pub cb: virConnectAuthCallbackPtr,
    pub cbdata: *mut ::std::os::raw::c_void,
}
pub type virConnectAuth = _virConnectAuth;
pub type virConnectAuthPtr = *mut virConnectAuth;
extern "C" {
    pub fn virGetVersion(
        libVer: *mut ::std::os::raw::c_ulong,
        type_: *const ::std::os::raw::c_char,
        typeVer: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;

    pub fn virInitialize() -> ::std::os::raw::c_int;

    pub fn virConnectOpen(name: *const ::std::os::raw::c_char) -> virConnectPtr;

    pub fn virConnectOpenReadOnly(name: *const ::std::os::raw::c_char) -> virConnectPtr;

    pub fn virConnectOpenAuth(
        name: *const ::std::os::raw::c_char,
        auth: virConnectAuthPtr,
        flags: ::std::os::raw::c_uint,
    ) -> virConnectPtr;

    pub fn virConnectRef(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectClose(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectGetType(conn: virConnectPtr) -> *const ::std::os::raw::c_char;

    pub fn virConnectGetVersion(
        conn: virConnectPtr,
        hvVer: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectGetLibVersion(
        conn: virConnectPtr,
        libVer: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectGetHostname(conn: virConnectPtr) -> *mut ::std::os::raw::c_char;

    pub fn virConnectGetURI(conn: virConnectPtr) -> *mut ::std::os::raw::c_char;

    pub fn virConnectGetSysinfo(
        conn: virConnectPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virConnectSetKeepAlive(
        conn: virConnectPtr,
        interval: ::std::os::raw::c_int,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virConnectCloseFunc = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        reason: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn virConnectRegisterCloseCallback(
        conn: virConnectPtr,
        cb: virConnectCloseFunc,
        opaque: *mut ::std::os::raw::c_void,
        freecb: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectUnregisterCloseCallback(
        conn: virConnectPtr,
        cb: virConnectCloseFunc,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectGetMaxVcpus(
        conn: virConnectPtr,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeGetInfo(conn: virConnectPtr, info: virNodeInfoPtr) -> ::std::os::raw::c_int;

    pub fn virConnectGetCapabilities(conn: virConnectPtr) -> *mut ::std::os::raw::c_char;

    pub fn virNodeGetCPUStats(
        conn: virConnectPtr,
        cpuNum: ::std::os::raw::c_int,
        params: virNodeCPUStatsPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeGetMemoryStats(
        conn: virConnectPtr,
        cellNum: ::std::os::raw::c_int,
        params: virNodeMemoryStatsPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeGetFreeMemory(conn: virConnectPtr) -> ::std::os::raw::c_ulonglong;

    pub fn virNodeGetSecurityModel(
        conn: virConnectPtr,
        secmodel: virSecurityModelPtr,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeSuspendForDuration(
        conn: virConnectPtr,
        target: ::std::os::raw::c_uint,
        duration: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeGetCellsFreeMemory(
        conn: virConnectPtr,
        freeMems: *mut ::std::os::raw::c_ulonglong,
        startCell: ::std::os::raw::c_int,
        maxCells: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectIsEncrypted(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectIsSecure(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectIsAlive(conn: virConnectPtr) -> ::std::os::raw::c_int;
}
pub const VIR_CPU_COMPARE_ERROR: virCPUCompareResult = -1;
pub const VIR_CPU_COMPARE_INCOMPATIBLE: virCPUCompareResult = 0;
pub const VIR_CPU_COMPARE_IDENTICAL: virCPUCompareResult = 1;
pub const VIR_CPU_COMPARE_SUPERSET: virCPUCompareResult = 2;
pub type virCPUCompareResult = i32;
pub const VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE: virConnectCompareCPUFlags = 1;
pub type virConnectCompareCPUFlags = u32;
extern "C" {
    pub fn virConnectCompareCPU(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectCompareHypervisorCPU(
        conn: virConnectPtr,
        emulator: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
        machine: *const ::std::os::raw::c_char,
        virttype: *const ::std::os::raw::c_char,
        xmlCPU: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectGetCPUModelNames(
        conn: virConnectPtr,
        arch: *const ::std::os::raw::c_char,
        models: *mut *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES: virConnectBaselineCPUFlags = 1;
pub const VIR_CONNECT_BASELINE_CPU_MIGRATABLE: virConnectBaselineCPUFlags = 2;
pub type virConnectBaselineCPUFlags = u32;
extern "C" {
    pub fn virConnectBaselineCPU(
        conn: virConnectPtr,
        xmlCPUs: *mut *const ::std::os::raw::c_char,
        ncpus: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virConnectBaselineHypervisorCPU(
        conn: virConnectPtr,
        emulator: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
        machine: *const ::std::os::raw::c_char,
        virttype: *const ::std::os::raw::c_char,
        xmlCPUs: *mut *const ::std::os::raw::c_char,
        ncpus: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virNodeGetFreePages(
        conn: virConnectPtr,
        npages: ::std::os::raw::c_uint,
        pages: *mut ::std::os::raw::c_uint,
        startcell: ::std::os::raw::c_int,
        cellcount: ::std::os::raw::c_uint,
        counts: *mut ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_NODE_ALLOC_PAGES_ADD: virNodeAllocPagesFlags = 0;
pub const VIR_NODE_ALLOC_PAGES_SET: virNodeAllocPagesFlags = 1;
pub type virNodeAllocPagesFlags = u32;
extern "C" {
    pub fn virNodeAllocPages(
        conn: virConnectPtr,
        npages: ::std::os::raw::c_uint,
        pageSizes: *mut ::std::os::raw::c_uint,
        pageCounts: *mut ::std::os::raw::c_ulonglong,
        startCell: ::std::os::raw::c_int,
        cellCount: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _virDomain(::std::os::raw::c_void);

pub type virDomain = _virDomain;
pub type virDomainPtr = *mut virDomain;
pub const VIR_DOMAIN_NOSTATE: virDomainState = 0;
pub const VIR_DOMAIN_RUNNING: virDomainState = 1;
pub const VIR_DOMAIN_BLOCKED: virDomainState = 2;
pub const VIR_DOMAIN_PAUSED: virDomainState = 3;
pub const VIR_DOMAIN_SHUTDOWN: virDomainState = 4;
pub const VIR_DOMAIN_SHUTOFF: virDomainState = 5;
pub const VIR_DOMAIN_CRASHED: virDomainState = 6;
pub const VIR_DOMAIN_PMSUSPENDED: virDomainState = 7;
pub type virDomainState = u32;
pub const VIR_DOMAIN_NOSTATE_UNKNOWN: virDomainNostateReason = 0;
pub type virDomainNostateReason = u32;
pub const VIR_DOMAIN_RUNNING_UNKNOWN: virDomainRunningReason = 0;
pub const VIR_DOMAIN_RUNNING_BOOTED: virDomainRunningReason = 1;
pub const VIR_DOMAIN_RUNNING_MIGRATED: virDomainRunningReason = 2;
pub const VIR_DOMAIN_RUNNING_RESTORED: virDomainRunningReason = 3;
pub const VIR_DOMAIN_RUNNING_FROM_SNAPSHOT: virDomainRunningReason = 4;
pub const VIR_DOMAIN_RUNNING_UNPAUSED: virDomainRunningReason = 5;
pub const VIR_DOMAIN_RUNNING_MIGRATION_CANCELED: virDomainRunningReason = 6;
pub const VIR_DOMAIN_RUNNING_SAVE_CANCELED: virDomainRunningReason = 7;
pub const VIR_DOMAIN_RUNNING_WAKEUP: virDomainRunningReason = 8;
pub const VIR_DOMAIN_RUNNING_CRASHED: virDomainRunningReason = 9;
pub const VIR_DOMAIN_RUNNING_POSTCOPY: virDomainRunningReason = 10;
pub type virDomainRunningReason = u32;
pub const VIR_DOMAIN_BLOCKED_UNKNOWN: virDomainBlockedReason = 0;
pub type virDomainBlockedReason = u32;
pub const VIR_DOMAIN_PAUSED_UNKNOWN: virDomainPausedReason = 0;
pub const VIR_DOMAIN_PAUSED_USER: virDomainPausedReason = 1;
pub const VIR_DOMAIN_PAUSED_MIGRATION: virDomainPausedReason = 2;
pub const VIR_DOMAIN_PAUSED_SAVE: virDomainPausedReason = 3;
pub const VIR_DOMAIN_PAUSED_DUMP: virDomainPausedReason = 4;
pub const VIR_DOMAIN_PAUSED_IOERROR: virDomainPausedReason = 5;
pub const VIR_DOMAIN_PAUSED_WATCHDOG: virDomainPausedReason = 6;
pub const VIR_DOMAIN_PAUSED_FROM_SNAPSHOT: virDomainPausedReason = 7;
pub const VIR_DOMAIN_PAUSED_SHUTTING_DOWN: virDomainPausedReason = 8;
pub const VIR_DOMAIN_PAUSED_SNAPSHOT: virDomainPausedReason = 9;
pub const VIR_DOMAIN_PAUSED_CRASHED: virDomainPausedReason = 10;
pub const VIR_DOMAIN_PAUSED_STARTING_UP: virDomainPausedReason = 11;
pub const VIR_DOMAIN_PAUSED_POSTCOPY: virDomainPausedReason = 12;
pub const VIR_DOMAIN_PAUSED_POSTCOPY_FAILED: virDomainPausedReason = 13;
pub type virDomainPausedReason = u32;
pub const VIR_DOMAIN_SHUTDOWN_UNKNOWN: virDomainShutdownReason = 0;
pub const VIR_DOMAIN_SHUTDOWN_USER: virDomainShutdownReason = 1;
pub type virDomainShutdownReason = u32;
pub const VIR_DOMAIN_SHUTOFF_UNKNOWN: virDomainShutoffReason = 0;
pub const VIR_DOMAIN_SHUTOFF_SHUTDOWN: virDomainShutoffReason = 1;
pub const VIR_DOMAIN_SHUTOFF_DESTROYED: virDomainShutoffReason = 2;
pub const VIR_DOMAIN_SHUTOFF_CRASHED: virDomainShutoffReason = 3;
pub const VIR_DOMAIN_SHUTOFF_MIGRATED: virDomainShutoffReason = 4;
pub const VIR_DOMAIN_SHUTOFF_SAVED: virDomainShutoffReason = 5;
pub const VIR_DOMAIN_SHUTOFF_FAILED: virDomainShutoffReason = 6;
pub const VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT: virDomainShutoffReason = 7;
pub const VIR_DOMAIN_SHUTOFF_DAEMON: virDomainShutoffReason = 8;
pub type virDomainShutoffReason = u32;
pub const VIR_DOMAIN_CRASHED_UNKNOWN: virDomainCrashedReason = 0;
pub const VIR_DOMAIN_CRASHED_PANICKED: virDomainCrashedReason = 1;
pub type virDomainCrashedReason = u32;
pub const VIR_DOMAIN_PMSUSPENDED_UNKNOWN: virDomainPMSuspendedReason = 0;
pub type virDomainPMSuspendedReason = u32;
pub const VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN: virDomainPMSuspendedDiskReason = 0;
pub type virDomainPMSuspendedDiskReason = u32;
pub const VIR_DOMAIN_CONTROL_OK: virDomainControlState = 0;
pub const VIR_DOMAIN_CONTROL_JOB: virDomainControlState = 1;
pub const VIR_DOMAIN_CONTROL_OCCUPIED: virDomainControlState = 2;
pub const VIR_DOMAIN_CONTROL_ERROR: virDomainControlState = 3;
pub type virDomainControlState = u32;
pub const VIR_DOMAIN_CONTROL_ERROR_REASON_NONE: virDomainControlErrorReason = 0;
pub const VIR_DOMAIN_CONTROL_ERROR_REASON_UNKNOWN: virDomainControlErrorReason = 1;
pub const VIR_DOMAIN_CONTROL_ERROR_REASON_MONITOR: virDomainControlErrorReason = 2;
pub const VIR_DOMAIN_CONTROL_ERROR_REASON_INTERNAL: virDomainControlErrorReason = 3;
pub type virDomainControlErrorReason = u32;
pub type virDomainControlInfo = _virDomainControlInfo;
#[repr(C)]
pub struct _virDomainControlInfo {
    pub state: ::std::os::raw::c_uint,
    pub details: ::std::os::raw::c_uint,
    pub stateTime: ::std::os::raw::c_ulonglong,
}
pub type virDomainControlInfoPtr = *mut virDomainControlInfo;
pub const VIR_DOMAIN_AFFECT_CURRENT: virDomainModificationImpact = 0;
pub const VIR_DOMAIN_AFFECT_LIVE: virDomainModificationImpact = 1;
pub const VIR_DOMAIN_AFFECT_CONFIG: virDomainModificationImpact = 2;
pub type virDomainModificationImpact = u32;
pub type virDomainInfo = _virDomainInfo;
#[repr(C)]
pub struct _virDomainInfo {
    pub state: ::std::os::raw::c_uchar,
    pub maxMem: ::std::os::raw::c_ulong,
    pub memory: ::std::os::raw::c_ulong,
    pub nrVirtCpu: ::std::os::raw::c_ushort,
    pub cpuTime: ::std::os::raw::c_ulonglong,
}
pub type virDomainInfoPtr = *mut virDomainInfo;
pub const VIR_DOMAIN_NONE: virDomainCreateFlags = 0;
pub const VIR_DOMAIN_START_PAUSED: virDomainCreateFlags = 1;
pub const VIR_DOMAIN_START_AUTODESTROY: virDomainCreateFlags = 2;
pub const VIR_DOMAIN_START_BYPASS_CACHE: virDomainCreateFlags = 4;
pub const VIR_DOMAIN_START_FORCE_BOOT: virDomainCreateFlags = 8;
pub const VIR_DOMAIN_START_VALIDATE: virDomainCreateFlags = 16;
pub type virDomainCreateFlags = u32;
extern "C" {
    pub fn virDomainGetSchedulerParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetSchedulerParametersFlags(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetSchedulerParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetSchedulerParametersFlags(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virDomainBlockStatsStruct = _virDomainBlockStats;
#[repr(C)]
pub struct _virDomainBlockStats {
    pub rd_req: ::std::os::raw::c_longlong,
    pub rd_bytes: ::std::os::raw::c_longlong,
    pub wr_req: ::std::os::raw::c_longlong,
    pub wr_bytes: ::std::os::raw::c_longlong,
    pub errs: ::std::os::raw::c_longlong,
}
pub type virDomainBlockStatsPtr = *mut virDomainBlockStatsStruct;
pub type virDomainInterfaceStatsStruct = _virDomainInterfaceStats;
#[repr(C)]
pub struct _virDomainInterfaceStats {
    pub rx_bytes: ::std::os::raw::c_longlong,
    pub rx_packets: ::std::os::raw::c_longlong,
    pub rx_errs: ::std::os::raw::c_longlong,
    pub rx_drop: ::std::os::raw::c_longlong,
    pub tx_bytes: ::std::os::raw::c_longlong,
    pub tx_packets: ::std::os::raw::c_longlong,
    pub tx_errs: ::std::os::raw::c_longlong,
    pub tx_drop: ::std::os::raw::c_longlong,
}
pub type virDomainInterfaceStatsPtr = *mut virDomainInterfaceStatsStruct;
pub const VIR_DOMAIN_MEMORY_STAT_SWAP_IN: virDomainMemoryStatTags = 0;
pub const VIR_DOMAIN_MEMORY_STAT_SWAP_OUT: virDomainMemoryStatTags = 1;
pub const VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT: virDomainMemoryStatTags = 2;
pub const VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT: virDomainMemoryStatTags = 3;
pub const VIR_DOMAIN_MEMORY_STAT_UNUSED: virDomainMemoryStatTags = 4;
pub const VIR_DOMAIN_MEMORY_STAT_AVAILABLE: virDomainMemoryStatTags = 5;
pub const VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON: virDomainMemoryStatTags = 6;
pub const VIR_DOMAIN_MEMORY_STAT_RSS: virDomainMemoryStatTags = 7;
pub const VIR_DOMAIN_MEMORY_STAT_USABLE: virDomainMemoryStatTags = 8;
pub const VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE: virDomainMemoryStatTags = 9;
pub const VIR_DOMAIN_MEMORY_STAT_DISK_CACHES: virDomainMemoryStatTags = 10;
pub const VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC: virDomainMemoryStatTags = 11;
pub const VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL: virDomainMemoryStatTags = 12;
pub const VIR_DOMAIN_MEMORY_STAT_NR: virDomainMemoryStatTags = 13;
pub type virDomainMemoryStatTags = u32;
pub type virDomainMemoryStatStruct = _virDomainMemoryStat;
#[repr(C)]
pub struct _virDomainMemoryStat {
    pub tag: ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_ulonglong,
}
pub type virDomainMemoryStatPtr = *mut virDomainMemoryStatStruct;
pub const VIR_DUMP_CRASH: virDomainCoreDumpFlags = 1;
pub const VIR_DUMP_LIVE: virDomainCoreDumpFlags = 2;
pub const VIR_DUMP_BYPASS_CACHE: virDomainCoreDumpFlags = 4;
pub const VIR_DUMP_RESET: virDomainCoreDumpFlags = 8;
pub const VIR_DUMP_MEMORY_ONLY: virDomainCoreDumpFlags = 16;
pub type virDomainCoreDumpFlags = u32;
pub const VIR_DOMAIN_CORE_DUMP_FORMAT_RAW: virDomainCoreDumpFormat = 0;
pub const VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB: virDomainCoreDumpFormat = 1;
pub const VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO: virDomainCoreDumpFormat = 2;
pub const VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY: virDomainCoreDumpFormat = 3;
pub type virDomainCoreDumpFormat = u32;
pub const VIR_MIGRATE_LIVE: virDomainMigrateFlags = 1;
pub const VIR_MIGRATE_PEER2PEER: virDomainMigrateFlags = 2;
pub const VIR_MIGRATE_TUNNELLED: virDomainMigrateFlags = 4;
pub const VIR_MIGRATE_PERSIST_DEST: virDomainMigrateFlags = 8;
pub const VIR_MIGRATE_UNDEFINE_SOURCE: virDomainMigrateFlags = 16;
pub const VIR_MIGRATE_PAUSED: virDomainMigrateFlags = 32;
pub const VIR_MIGRATE_NON_SHARED_DISK: virDomainMigrateFlags = 64;
pub const VIR_MIGRATE_NON_SHARED_INC: virDomainMigrateFlags = 128;
pub const VIR_MIGRATE_CHANGE_PROTECTION: virDomainMigrateFlags = 256;
pub const VIR_MIGRATE_UNSAFE: virDomainMigrateFlags = 512;
pub const VIR_MIGRATE_OFFLINE: virDomainMigrateFlags = 1024;
pub const VIR_MIGRATE_COMPRESSED: virDomainMigrateFlags = 2048;
pub const VIR_MIGRATE_ABORT_ON_ERROR: virDomainMigrateFlags = 4096;
pub const VIR_MIGRATE_AUTO_CONVERGE: virDomainMigrateFlags = 8192;
pub const VIR_MIGRATE_RDMA_PIN_ALL: virDomainMigrateFlags = 16384;
pub const VIR_MIGRATE_POSTCOPY: virDomainMigrateFlags = 32768;
pub const VIR_MIGRATE_TLS: virDomainMigrateFlags = 65536;
pub const VIR_MIGRATE_PARALLEL: virDomainMigrateFlags = 131072;
pub type virDomainMigrateFlags = u32;
extern "C" {
    pub fn virDomainMigrate(
        domain: virDomainPtr,
        dconn: virConnectPtr,
        flags: ::std::os::raw::c_ulong,
        dname: *const ::std::os::raw::c_char,
        uri: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
    ) -> virDomainPtr;

    pub fn virDomainMigrate2(
        domain: virDomainPtr,
        dconn: virConnectPtr,
        dxml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
        dname: *const ::std::os::raw::c_char,
        uri: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
    ) -> virDomainPtr;

    pub fn virDomainMigrate3(
        domain: virDomainPtr,
        dconn: virConnectPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainPtr;

    pub fn virDomainMigrateToURI(
        domain: virDomainPtr,
        duri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
        dname: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateToURI2(
        domain: virDomainPtr,
        dconnuri: *const ::std::os::raw::c_char,
        miguri: *const ::std::os::raw::c_char,
        dxml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
        dname: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateToURI3(
        domain: virDomainPtr,
        dconnuri: *const ::std::os::raw::c_char,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateGetMaxDowntime(
        domain: virDomainPtr,
        downtime: *mut ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateSetMaxDowntime(
        domain: virDomainPtr,
        downtime: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateGetCompressionCache(
        domain: virDomainPtr,
        cacheSize: *mut ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateSetCompressionCache(
        domain: virDomainPtr,
        cacheSize: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY: virDomainMigrateMaxSpeedFlags = 1;
pub type virDomainMigrateMaxSpeedFlags = u32;
extern "C" {
    pub fn virDomainMigrateSetMaxSpeed(
        domain: virDomainPtr,
        bandwidth: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateGetMaxSpeed(
        domain: virDomainPtr,
        bandwidth: *mut ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMigrateStartPostCopy(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectGetDomainCapabilities(
        conn: virConnectPtr,
        emulatorbin: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
        machine: *const ::std::os::raw::c_char,
        virttype: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virConnectListDomains(
        conn: virConnectPtr,
        ids: *mut ::std::os::raw::c_int,
        maxids: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectNumOfDomains(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virDomainGetConnect(domain: virDomainPtr) -> virConnectPtr;

    pub fn virDomainCreateXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainPtr;

    pub fn virDomainCreateXMLWithFiles(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        nfiles: ::std::os::raw::c_uint,
        files: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainPtr;

    pub fn virDomainLookupByName(
        conn: virConnectPtr,
        name: *const ::std::os::raw::c_char,
    ) -> virDomainPtr;

    pub fn virDomainLookupByID(conn: virConnectPtr, id: ::std::os::raw::c_int) -> virDomainPtr;

    pub fn virDomainLookupByUUID(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_uchar,
    ) -> virDomainPtr;

    pub fn virDomainLookupByUUIDString(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_char,
    ) -> virDomainPtr;
}
pub const VIR_DOMAIN_SHUTDOWN_DEFAULT: virDomainShutdownFlagValues = 0;
pub const VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN: virDomainShutdownFlagValues = 1;
pub const VIR_DOMAIN_SHUTDOWN_GUEST_AGENT: virDomainShutdownFlagValues = 2;
pub const VIR_DOMAIN_SHUTDOWN_INITCTL: virDomainShutdownFlagValues = 4;
pub const VIR_DOMAIN_SHUTDOWN_SIGNAL: virDomainShutdownFlagValues = 8;
pub const VIR_DOMAIN_SHUTDOWN_PARAVIRT: virDomainShutdownFlagValues = 16;
pub type virDomainShutdownFlagValues = u32;
extern "C" {
    pub fn virDomainShutdown(domain: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainShutdownFlags(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_REBOOT_DEFAULT: virDomainRebootFlagValues = 0;
pub const VIR_DOMAIN_REBOOT_ACPI_POWER_BTN: virDomainRebootFlagValues = 1;
pub const VIR_DOMAIN_REBOOT_GUEST_AGENT: virDomainRebootFlagValues = 2;
pub const VIR_DOMAIN_REBOOT_INITCTL: virDomainRebootFlagValues = 4;
pub const VIR_DOMAIN_REBOOT_SIGNAL: virDomainRebootFlagValues = 8;
pub const VIR_DOMAIN_REBOOT_PARAVIRT: virDomainRebootFlagValues = 16;
pub type virDomainRebootFlagValues = u32;
extern "C" {
    pub fn virDomainReboot(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainReset(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainDestroy(domain: virDomainPtr) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_DESTROY_DEFAULT: virDomainDestroyFlagsValues = 0;
pub const VIR_DOMAIN_DESTROY_GRACEFUL: virDomainDestroyFlagsValues = 1;
pub type virDomainDestroyFlagsValues = u32;
extern "C" {
    pub fn virDomainDestroyFlags(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainRef(domain: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainFree(domain: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainSuspend(domain: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainResume(domain: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainPMSuspendForDuration(
        domain: virDomainPtr,
        target: ::std::os::raw::c_uint,
        duration: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainPMWakeup(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_SAVE_BYPASS_CACHE: virDomainSaveRestoreFlags = 1;
pub const VIR_DOMAIN_SAVE_RUNNING: virDomainSaveRestoreFlags = 2;
pub const VIR_DOMAIN_SAVE_PAUSED: virDomainSaveRestoreFlags = 4;
pub type virDomainSaveRestoreFlags = u32;
extern "C" {
    pub fn virDomainSave(
        domain: virDomainPtr,
        to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSaveFlags(
        domain: virDomainPtr,
        to: *const ::std::os::raw::c_char,
        dxml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainRestore(
        conn: virConnectPtr,
        from: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainRestoreFlags(
        conn: virConnectPtr,
        from: *const ::std::os::raw::c_char,
        dxml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSaveImageGetXMLDesc(
        conn: virConnectPtr,
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virDomainSaveImageDefineXML(
        conn: virConnectPtr,
        file: *const ::std::os::raw::c_char,
        dxml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainManagedSave(
        dom: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainHasManagedSaveImage(
        dom: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainManagedSaveRemove(
        dom: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainManagedSaveGetXMLDesc(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virDomainManagedSaveDefineXML(
        domain: virDomainPtr,
        dxml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCoreDump(
        domain: virDomainPtr,
        to: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCoreDumpWithFormat(
        domain: virDomainPtr,
        to: *const ::std::os::raw::c_char,
        dumpformat: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainScreenshot(
        domain: virDomainPtr,
        stream: virStreamPtr,
        screen: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virDomainGetInfo(domain: virDomainPtr, info: virDomainInfoPtr) -> ::std::os::raw::c_int;

    pub fn virDomainGetState(
        domain: virDomainPtr,
        state: *mut ::std::os::raw::c_int,
        reason: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetCPUStats(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_uint,
        start_cpu: ::std::os::raw::c_int,
        ncpus: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetControlInfo(
        domain: virDomainPtr,
        info: virDomainControlInfoPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetSchedulerType(
        domain: virDomainPtr,
        nparams: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virDomainSetBlkioParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetBlkioParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetMemoryParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetMemoryParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_MEM_CURRENT: virDomainMemoryModFlags = 0;
pub const VIR_DOMAIN_MEM_LIVE: virDomainMemoryModFlags = 1;
pub const VIR_DOMAIN_MEM_CONFIG: virDomainMemoryModFlags = 2;
pub const VIR_DOMAIN_MEM_MAXIMUM: virDomainMemoryModFlags = 4;
pub type virDomainMemoryModFlags = u32;
pub const VIR_DOMAIN_NUMATUNE_MEM_STRICT: virDomainNumatuneMemMode = 0;
pub const VIR_DOMAIN_NUMATUNE_MEM_PREFERRED: virDomainNumatuneMemMode = 1;
pub const VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE: virDomainNumatuneMemMode = 2;
pub type virDomainNumatuneMemMode = u32;
extern "C" {
    pub fn virDomainSetNumaParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetNumaParameters(
        domain: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetName(domain: virDomainPtr) -> *const ::std::os::raw::c_char;

    pub fn virDomainGetID(domain: virDomainPtr) -> ::std::os::raw::c_uint;

    pub fn virDomainGetUUID(
        domain: virDomainPtr,
        uuid: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetUUIDString(
        domain: virDomainPtr,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetOSType(domain: virDomainPtr) -> *mut ::std::os::raw::c_char;

    pub fn virDomainGetMaxMemory(domain: virDomainPtr) -> ::std::os::raw::c_ulong;

    pub fn virDomainSetMaxMemory(
        domain: virDomainPtr,
        memory: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetMemory(
        domain: virDomainPtr,
        memory: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetMemoryFlags(
        domain: virDomainPtr,
        memory: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetMemoryStatsPeriod(
        domain: virDomainPtr,
        period: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetMaxVcpus(domain: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainGetSecurityLabel(
        domain: virDomainPtr,
        seclabel: virSecurityLabelPtr,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetHostname(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virDomainGetSecurityLabelList(
        domain: virDomainPtr,
        seclabels: *mut virSecurityLabelPtr,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_METADATA_DESCRIPTION: virDomainMetadataType = 0;
pub const VIR_DOMAIN_METADATA_TITLE: virDomainMetadataType = 1;
pub const VIR_DOMAIN_METADATA_ELEMENT: virDomainMetadataType = 2;
pub type virDomainMetadataType = u32;
extern "C" {
    pub fn virDomainSetMetadata(
        domain: virDomainPtr,
        type_: ::std::os::raw::c_int,
        metadata: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetMetadata(
        domain: virDomainPtr,
        type_: ::std::os::raw::c_int,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
pub const VIR_DOMAIN_XML_SECURE: virDomainXMLFlags = 1;
pub const VIR_DOMAIN_XML_INACTIVE: virDomainXMLFlags = 2;
pub const VIR_DOMAIN_XML_UPDATE_CPU: virDomainXMLFlags = 4;
pub const VIR_DOMAIN_XML_MIGRATABLE: virDomainXMLFlags = 8;
pub type virDomainXMLFlags = u32;
pub const VIR_DOMAIN_SAVE_IMAGE_XML_SECURE: virDomainSaveImageXMLFlags = 1;
pub type virDomainSaveImageXMLFlags = u32;
extern "C" {
    pub fn virDomainGetXMLDesc(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virConnectDomainXMLFromNative(
        conn: virConnectPtr,
        nativeFormat: *const ::std::os::raw::c_char,
        nativeConfig: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virConnectDomainXMLToNative(
        conn: virConnectPtr,
        nativeFormat: *const ::std::os::raw::c_char,
        domainXml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virDomainBlockStats(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        stats: virDomainBlockStatsPtr,
        size: usize,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainBlockStatsFlags(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainInterfaceStats(
        dom: virDomainPtr,
        device: *const ::std::os::raw::c_char,
        stats: virDomainInterfaceStatsPtr,
        size: usize,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetInterfaceParameters(
        dom: virDomainPtr,
        device: *const ::std::os::raw::c_char,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetInterfaceParameters(
        dom: virDomainPtr,
        device: *const ::std::os::raw::c_char,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainBlockPeek(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_ulonglong,
        size: usize,
        buffer: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_RESIZE_BYTES: virDomainBlockResizeFlags = 1;
pub type virDomainBlockResizeFlags = u32;
extern "C" {
    pub fn virDomainBlockResize(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virDomainBlockInfo = _virDomainBlockInfo;
pub type virDomainBlockInfoPtr = *mut virDomainBlockInfo;
#[repr(C)]
pub struct _virDomainBlockInfo {
    pub capacity: ::std::os::raw::c_ulonglong,
    pub allocation: ::std::os::raw::c_ulonglong,
    pub physical: ::std::os::raw::c_ulonglong,
}
extern "C" {
    pub fn virDomainGetBlockInfo(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        info: virDomainBlockInfoPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainMemoryStats(
        dom: virDomainPtr,
        stats: virDomainMemoryStatPtr,
        nr_stats: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_MEMORY_VIRTUAL: virDomainMemoryFlags = 1;
pub const VIR_MEMORY_PHYSICAL: virDomainMemoryFlags = 2;
pub type virDomainMemoryFlags = u32;
extern "C" {
    pub fn virDomainMemoryPeek(
        dom: virDomainPtr,
        start: ::std::os::raw::c_ulonglong,
        size: usize,
        buffer: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_DEFINE_VALIDATE: virDomainDefineFlags = 1;
pub type virDomainDefineFlags = u32;
extern "C" {
    pub fn virDomainDefineXML(
        conn: virConnectPtr,
        xml: *const ::std::os::raw::c_char,
    ) -> virDomainPtr;

    pub fn virDomainDefineXMLFlags(
        conn: virConnectPtr,
        xml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainPtr;

    pub fn virDomainUndefine(domain: virDomainPtr) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_UNDEFINE_MANAGED_SAVE: virDomainUndefineFlagsValues = 1;
pub const VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA: virDomainUndefineFlagsValues = 2;
pub const VIR_DOMAIN_UNDEFINE_NVRAM: virDomainUndefineFlagsValues = 4;
pub const VIR_DOMAIN_UNDEFINE_KEEP_NVRAM: virDomainUndefineFlagsValues = 8;
pub const VIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA: virDomainUndefineFlagsValues = 16;
pub type virDomainUndefineFlagsValues = u32;
extern "C" {
    pub fn virDomainUndefineFlags(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectNumOfDefinedDomains(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListDefinedDomains(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_LIST_DOMAINS_ACTIVE: virConnectListAllDomainsFlags = 1;
pub const VIR_CONNECT_LIST_DOMAINS_INACTIVE: virConnectListAllDomainsFlags = 2;
pub const VIR_CONNECT_LIST_DOMAINS_PERSISTENT: virConnectListAllDomainsFlags = 4;
pub const VIR_CONNECT_LIST_DOMAINS_TRANSIENT: virConnectListAllDomainsFlags = 8;
pub const VIR_CONNECT_LIST_DOMAINS_RUNNING: virConnectListAllDomainsFlags = 16;
pub const VIR_CONNECT_LIST_DOMAINS_PAUSED: virConnectListAllDomainsFlags = 32;
pub const VIR_CONNECT_LIST_DOMAINS_SHUTOFF: virConnectListAllDomainsFlags = 64;
pub const VIR_CONNECT_LIST_DOMAINS_OTHER: virConnectListAllDomainsFlags = 128;
pub const VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE: virConnectListAllDomainsFlags = 256;
pub const VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE: virConnectListAllDomainsFlags = 512;
pub const VIR_CONNECT_LIST_DOMAINS_AUTOSTART: virConnectListAllDomainsFlags = 1024;
pub const VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART: virConnectListAllDomainsFlags = 2048;
pub const VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT: virConnectListAllDomainsFlags = 4096;
pub const VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT: virConnectListAllDomainsFlags = 8192;
pub const VIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT: virConnectListAllDomainsFlags = 16384;
pub const VIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT: virConnectListAllDomainsFlags = 32768;
pub type virConnectListAllDomainsFlags = u32;
extern "C" {
    pub fn virConnectListAllDomains(
        conn: virConnectPtr,
        domains: *mut *mut virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCreate(domain: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainCreateWithFlags(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCreateWithFiles(
        domain: virDomainPtr,
        nfiles: ::std::os::raw::c_uint,
        files: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetAutostart(
        domain: virDomainPtr,
        autostart: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetAutostart(
        domain: virDomainPtr,
        autostart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_VCPU_OFFLINE: virVcpuState = 0;
pub const VIR_VCPU_RUNNING: virVcpuState = 1;
pub const VIR_VCPU_BLOCKED: virVcpuState = 2;
pub type virVcpuState = u32;
pub type virVcpuInfo = _virVcpuInfo;
#[repr(C)]
pub struct _virVcpuInfo {
    pub number: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_int,
    pub cpuTime: ::std::os::raw::c_ulonglong,
    pub cpu: ::std::os::raw::c_int,
}
pub type virVcpuInfoPtr = *mut virVcpuInfo;
pub const VIR_DOMAIN_VCPU_CURRENT: virDomainVcpuFlags = 0;
pub const VIR_DOMAIN_VCPU_LIVE: virDomainVcpuFlags = 1;
pub const VIR_DOMAIN_VCPU_CONFIG: virDomainVcpuFlags = 2;
pub const VIR_DOMAIN_VCPU_MAXIMUM: virDomainVcpuFlags = 4;
pub const VIR_DOMAIN_VCPU_GUEST: virDomainVcpuFlags = 8;
pub const VIR_DOMAIN_VCPU_HOTPLUGGABLE: virDomainVcpuFlags = 16;
pub type virDomainVcpuFlags = u32;
extern "C" {
    pub fn virDomainSetVcpus(
        domain: virDomainPtr,
        nvcpus: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetVcpusFlags(
        domain: virDomainPtr,
        nvcpus: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetVcpusFlags(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainPinVcpu(
        domain: virDomainPtr,
        vcpu: ::std::os::raw::c_uint,
        cpumap: *mut ::std::os::raw::c_uchar,
        maplen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainPinVcpuFlags(
        domain: virDomainPtr,
        vcpu: ::std::os::raw::c_uint,
        cpumap: *mut ::std::os::raw::c_uchar,
        maplen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetVcpuPinInfo(
        domain: virDomainPtr,
        ncpumaps: ::std::os::raw::c_int,
        cpumaps: *mut ::std::os::raw::c_uchar,
        maplen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainPinEmulator(
        domain: virDomainPtr,
        cpumap: *mut ::std::os::raw::c_uchar,
        maplen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetEmulatorPinInfo(
        domain: virDomainPtr,
        cpumaps: *mut ::std::os::raw::c_uchar,
        maplen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virDomainIOThreadInfo = _virDomainIOThreadInfo;
pub type virDomainIOThreadInfoPtr = *mut virDomainIOThreadInfo;
#[repr(C)]
pub struct _virDomainIOThreadInfo {
    pub iothread_id: ::std::os::raw::c_uint,
    pub cpumap: *mut ::std::os::raw::c_uchar,
    pub cpumaplen: ::std::os::raw::c_int,
}
extern "C" {
    pub fn virDomainIOThreadInfoFree(info: virDomainIOThreadInfoPtr);

    pub fn virDomainGetIOThreadInfo(
        domain: virDomainPtr,
        info: *mut *mut virDomainIOThreadInfoPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainPinIOThread(
        domain: virDomainPtr,
        iothread_id: ::std::os::raw::c_uint,
        cpumap: *mut ::std::os::raw::c_uchar,
        maplen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainAddIOThread(
        domain: virDomainPtr,
        iothread_id: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainDelIOThread(
        domain: virDomainPtr,
        iothread_id: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetIOThreadParams(
        domain: virDomainPtr,
        iothread_id: ::std::os::raw::c_uint,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetVcpus(
        domain: virDomainPtr,
        info: virVcpuInfoPtr,
        maxinfo: ::std::os::raw::c_int,
        cpumaps: *mut ::std::os::raw::c_uchar,
        maplen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_DEVICE_MODIFY_CURRENT: virDomainDeviceModifyFlags = 0;
pub const VIR_DOMAIN_DEVICE_MODIFY_LIVE: virDomainDeviceModifyFlags = 1;
pub const VIR_DOMAIN_DEVICE_MODIFY_CONFIG: virDomainDeviceModifyFlags = 2;
pub const VIR_DOMAIN_DEVICE_MODIFY_FORCE: virDomainDeviceModifyFlags = 4;
pub type virDomainDeviceModifyFlags = u32;
extern "C" {
    pub fn virDomainAttachDevice(
        domain: virDomainPtr,
        xml: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainDetachDevice(
        domain: virDomainPtr,
        xml: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainAttachDeviceFlags(
        domain: virDomainPtr,
        xml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainDetachDeviceFlags(
        domain: virDomainPtr,
        xml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainUpdateDeviceFlags(
        domain: virDomainPtr,
        xml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainDetachDeviceAlias(
        domain: virDomainPtr,
        alias: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virDomainStatsRecord = _virDomainStatsRecord;
pub type virDomainStatsRecordPtr = *mut virDomainStatsRecord;
#[repr(C)]
pub struct _virDomainStatsRecord {
    pub dom: virDomainPtr,
    pub params: virTypedParameterPtr,
    pub nparams: ::std::os::raw::c_int,
}
pub const VIR_DOMAIN_STATS_STATE: virDomainStatsTypes = 1;
pub const VIR_DOMAIN_STATS_CPU_TOTAL: virDomainStatsTypes = 2;
pub const VIR_DOMAIN_STATS_BALLOON: virDomainStatsTypes = 4;
pub const VIR_DOMAIN_STATS_VCPU: virDomainStatsTypes = 8;
pub const VIR_DOMAIN_STATS_INTERFACE: virDomainStatsTypes = 16;
pub const VIR_DOMAIN_STATS_BLOCK: virDomainStatsTypes = 32;
pub const VIR_DOMAIN_STATS_PERF: virDomainStatsTypes = 64;
pub const VIR_DOMAIN_STATS_IOTHREAD: virDomainStatsTypes = 128;
pub type virDomainStatsTypes = u32;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE: virConnectGetAllDomainStatsFlags = 1;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE: virConnectGetAllDomainStatsFlags = 2;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT: virConnectGetAllDomainStatsFlags = 4;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT: virConnectGetAllDomainStatsFlags = 8;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING: virConnectGetAllDomainStatsFlags = 16;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED: virConnectGetAllDomainStatsFlags = 32;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF: virConnectGetAllDomainStatsFlags = 64;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER: virConnectGetAllDomainStatsFlags = 128;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT: virConnectGetAllDomainStatsFlags = 536870912;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING: virConnectGetAllDomainStatsFlags = 1073741824;
pub const VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS: virConnectGetAllDomainStatsFlags =
    2147483648;
pub type virConnectGetAllDomainStatsFlags = u32;
extern "C" {
    pub fn virConnectGetAllDomainStats(
        conn: virConnectPtr,
        stats: ::std::os::raw::c_uint,
        retStats: *mut *mut virDomainStatsRecordPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainListGetStats(
        doms: *mut virDomainPtr,
        stats: ::std::os::raw::c_uint,
        retStats: *mut *mut virDomainStatsRecordPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainStatsRecordListFree(stats: *mut virDomainStatsRecordPtr);

    pub fn virDomainGetPerfEvents(
        dom: virDomainPtr,
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetPerfEvents(
        dom: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN: virDomainBlockJobType = 0;
pub const VIR_DOMAIN_BLOCK_JOB_TYPE_PULL: virDomainBlockJobType = 1;
pub const VIR_DOMAIN_BLOCK_JOB_TYPE_COPY: virDomainBlockJobType = 2;
pub const VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT: virDomainBlockJobType = 3;
pub const VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT: virDomainBlockJobType = 4;
pub type virDomainBlockJobType = u32;
pub const VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC: virDomainBlockJobAbortFlags = 1;
pub const VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT: virDomainBlockJobAbortFlags = 2;
pub type virDomainBlockJobAbortFlags = u32;
extern "C" {
    pub fn virDomainBlockJobAbort(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES: virDomainBlockJobInfoFlags = 1;
pub type virDomainBlockJobInfoFlags = u32;
pub type virDomainBlockJobCursor = ::std::os::raw::c_ulonglong;
pub type virDomainBlockJobInfo = _virDomainBlockJobInfo;
#[repr(C)]
pub struct _virDomainBlockJobInfo {
    pub type_: ::std::os::raw::c_int,
    pub bandwidth: ::std::os::raw::c_ulong,
    pub cur: virDomainBlockJobCursor,
    pub end: virDomainBlockJobCursor,
}
pub type virDomainBlockJobInfoPtr = *mut virDomainBlockJobInfo;
extern "C" {
    pub fn virDomainGetBlockJobInfo(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        info: virDomainBlockJobInfoPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES: virDomainBlockJobSetSpeedFlags = 1;
pub type virDomainBlockJobSetSpeedFlags = u32;
extern "C" {
    pub fn virDomainBlockJobSetSpeed(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES: virDomainBlockPullFlags = 64;
pub type virDomainBlockPullFlags = u32;
extern "C" {
    pub fn virDomainBlockPull(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_REBASE_SHALLOW: virDomainBlockRebaseFlags = 1;
pub const VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT: virDomainBlockRebaseFlags = 2;
pub const VIR_DOMAIN_BLOCK_REBASE_COPY_RAW: virDomainBlockRebaseFlags = 4;
pub const VIR_DOMAIN_BLOCK_REBASE_COPY: virDomainBlockRebaseFlags = 8;
pub const VIR_DOMAIN_BLOCK_REBASE_RELATIVE: virDomainBlockRebaseFlags = 16;
pub const VIR_DOMAIN_BLOCK_REBASE_COPY_DEV: virDomainBlockRebaseFlags = 32;
pub const VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES: virDomainBlockRebaseFlags = 64;
pub type virDomainBlockRebaseFlags = u32;
extern "C" {
    pub fn virDomainBlockRebase(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        base: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_COPY_SHALLOW: virDomainBlockCopyFlags = 1;
pub const VIR_DOMAIN_BLOCK_COPY_REUSE_EXT: virDomainBlockCopyFlags = 2;
pub const VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB: virDomainBlockCopyFlags = 4;
pub type virDomainBlockCopyFlags = u32;
extern "C" {
    pub fn virDomainBlockCopy(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        destxml: *const ::std::os::raw::c_char,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_BLOCK_COMMIT_SHALLOW: virDomainBlockCommitFlags = 1;
pub const VIR_DOMAIN_BLOCK_COMMIT_DELETE: virDomainBlockCommitFlags = 2;
pub const VIR_DOMAIN_BLOCK_COMMIT_ACTIVE: virDomainBlockCommitFlags = 4;
pub const VIR_DOMAIN_BLOCK_COMMIT_RELATIVE: virDomainBlockCommitFlags = 8;
pub const VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES: virDomainBlockCommitFlags = 16;
pub type virDomainBlockCommitFlags = u32;
extern "C" {
    pub fn virDomainBlockCommit(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        base: *const ::std::os::raw::c_char,
        top: *const ::std::os::raw::c_char,
        bandwidth: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetBlockIoTune(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetBlockIoTune(
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        params: virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_DISK_ERROR_NONE: virDomainDiskErrorCode = 0;
pub const VIR_DOMAIN_DISK_ERROR_UNSPEC: virDomainDiskErrorCode = 1;
pub const VIR_DOMAIN_DISK_ERROR_NO_SPACE: virDomainDiskErrorCode = 2;
pub type virDomainDiskErrorCode = u32;
pub type virDomainDiskError = _virDomainDiskError;
pub type virDomainDiskErrorPtr = *mut virDomainDiskError;
#[repr(C)]
pub struct _virDomainDiskError {
    pub disk: *mut ::std::os::raw::c_char,
    pub error: ::std::os::raw::c_int,
}
extern "C" {
    pub fn virDomainGetDiskErrors(
        dom: virDomainPtr,
        errors: virDomainDiskErrorPtr,
        maxerrors: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_KEYCODE_SET_LINUX: virKeycodeSet = 0;
pub const VIR_KEYCODE_SET_XT: virKeycodeSet = 1;
pub const VIR_KEYCODE_SET_ATSET1: virKeycodeSet = 2;
pub const VIR_KEYCODE_SET_ATSET2: virKeycodeSet = 3;
pub const VIR_KEYCODE_SET_ATSET3: virKeycodeSet = 4;
pub const VIR_KEYCODE_SET_OSX: virKeycodeSet = 5;
pub const VIR_KEYCODE_SET_XT_KBD: virKeycodeSet = 6;
pub const VIR_KEYCODE_SET_USB: virKeycodeSet = 7;
pub const VIR_KEYCODE_SET_WIN32: virKeycodeSet = 8;
pub const VIR_KEYCODE_SET_QNUM: virKeycodeSet = 9;
pub type virKeycodeSet = u32;
extern "C" {
    pub fn virDomainSendKey(
        domain: virDomainPtr,
        codeset: ::std::os::raw::c_uint,
        holdtime: ::std::os::raw::c_uint,
        keycodes: *mut ::std::os::raw::c_uint,
        nkeycodes: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_PROCESS_SIGNAL_NOP: virDomainProcessSignal = 0;
pub const VIR_DOMAIN_PROCESS_SIGNAL_HUP: virDomainProcessSignal = 1;
pub const VIR_DOMAIN_PROCESS_SIGNAL_INT: virDomainProcessSignal = 2;
pub const VIR_DOMAIN_PROCESS_SIGNAL_QUIT: virDomainProcessSignal = 3;
pub const VIR_DOMAIN_PROCESS_SIGNAL_ILL: virDomainProcessSignal = 4;
pub const VIR_DOMAIN_PROCESS_SIGNAL_TRAP: virDomainProcessSignal = 5;
pub const VIR_DOMAIN_PROCESS_SIGNAL_ABRT: virDomainProcessSignal = 6;
pub const VIR_DOMAIN_PROCESS_SIGNAL_BUS: virDomainProcessSignal = 7;
pub const VIR_DOMAIN_PROCESS_SIGNAL_FPE: virDomainProcessSignal = 8;
pub const VIR_DOMAIN_PROCESS_SIGNAL_KILL: virDomainProcessSignal = 9;
pub const VIR_DOMAIN_PROCESS_SIGNAL_USR1: virDomainProcessSignal = 10;
pub const VIR_DOMAIN_PROCESS_SIGNAL_SEGV: virDomainProcessSignal = 11;
pub const VIR_DOMAIN_PROCESS_SIGNAL_USR2: virDomainProcessSignal = 12;
pub const VIR_DOMAIN_PROCESS_SIGNAL_PIPE: virDomainProcessSignal = 13;
pub const VIR_DOMAIN_PROCESS_SIGNAL_ALRM: virDomainProcessSignal = 14;
pub const VIR_DOMAIN_PROCESS_SIGNAL_TERM: virDomainProcessSignal = 15;
pub const VIR_DOMAIN_PROCESS_SIGNAL_STKFLT: virDomainProcessSignal = 16;
pub const VIR_DOMAIN_PROCESS_SIGNAL_CHLD: virDomainProcessSignal = 17;
pub const VIR_DOMAIN_PROCESS_SIGNAL_CONT: virDomainProcessSignal = 18;
pub const VIR_DOMAIN_PROCESS_SIGNAL_STOP: virDomainProcessSignal = 19;
pub const VIR_DOMAIN_PROCESS_SIGNAL_TSTP: virDomainProcessSignal = 20;
pub const VIR_DOMAIN_PROCESS_SIGNAL_TTIN: virDomainProcessSignal = 21;
pub const VIR_DOMAIN_PROCESS_SIGNAL_TTOU: virDomainProcessSignal = 22;
pub const VIR_DOMAIN_PROCESS_SIGNAL_URG: virDomainProcessSignal = 23;
pub const VIR_DOMAIN_PROCESS_SIGNAL_XCPU: virDomainProcessSignal = 24;
pub const VIR_DOMAIN_PROCESS_SIGNAL_XFSZ: virDomainProcessSignal = 25;
pub const VIR_DOMAIN_PROCESS_SIGNAL_VTALRM: virDomainProcessSignal = 26;
pub const VIR_DOMAIN_PROCESS_SIGNAL_PROF: virDomainProcessSignal = 27;
pub const VIR_DOMAIN_PROCESS_SIGNAL_WINCH: virDomainProcessSignal = 28;
pub const VIR_DOMAIN_PROCESS_SIGNAL_POLL: virDomainProcessSignal = 29;
pub const VIR_DOMAIN_PROCESS_SIGNAL_PWR: virDomainProcessSignal = 30;
pub const VIR_DOMAIN_PROCESS_SIGNAL_SYS: virDomainProcessSignal = 31;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT0: virDomainProcessSignal = 32;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT1: virDomainProcessSignal = 33;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT2: virDomainProcessSignal = 34;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT3: virDomainProcessSignal = 35;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT4: virDomainProcessSignal = 36;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT5: virDomainProcessSignal = 37;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT6: virDomainProcessSignal = 38;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT7: virDomainProcessSignal = 39;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT8: virDomainProcessSignal = 40;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT9: virDomainProcessSignal = 41;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT10: virDomainProcessSignal = 42;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT11: virDomainProcessSignal = 43;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT12: virDomainProcessSignal = 44;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT13: virDomainProcessSignal = 45;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT14: virDomainProcessSignal = 46;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT15: virDomainProcessSignal = 47;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT16: virDomainProcessSignal = 48;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT17: virDomainProcessSignal = 49;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT18: virDomainProcessSignal = 50;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT19: virDomainProcessSignal = 51;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT20: virDomainProcessSignal = 52;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT21: virDomainProcessSignal = 53;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT22: virDomainProcessSignal = 54;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT23: virDomainProcessSignal = 55;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT24: virDomainProcessSignal = 56;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT25: virDomainProcessSignal = 57;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT26: virDomainProcessSignal = 58;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT27: virDomainProcessSignal = 59;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT28: virDomainProcessSignal = 60;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT29: virDomainProcessSignal = 61;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT30: virDomainProcessSignal = 62;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT31: virDomainProcessSignal = 63;
pub const VIR_DOMAIN_PROCESS_SIGNAL_RT32: virDomainProcessSignal = 64;
pub type virDomainProcessSignal = u32;
extern "C" {
    pub fn virDomainSendProcessSignal(
        domain: virDomainPtr,
        pid_value: ::std::os::raw::c_longlong,
        signum: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCreateLinux(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainPtr;
}
pub const VIR_DOMAIN_EVENT_DEFINED: virDomainEventType = 0;
pub const VIR_DOMAIN_EVENT_UNDEFINED: virDomainEventType = 1;
pub const VIR_DOMAIN_EVENT_STARTED: virDomainEventType = 2;
pub const VIR_DOMAIN_EVENT_SUSPENDED: virDomainEventType = 3;
pub const VIR_DOMAIN_EVENT_RESUMED: virDomainEventType = 4;
pub const VIR_DOMAIN_EVENT_STOPPED: virDomainEventType = 5;
pub const VIR_DOMAIN_EVENT_SHUTDOWN: virDomainEventType = 6;
pub const VIR_DOMAIN_EVENT_PMSUSPENDED: virDomainEventType = 7;
pub const VIR_DOMAIN_EVENT_CRASHED: virDomainEventType = 8;
pub type virDomainEventType = u32;
pub const VIR_DOMAIN_EVENT_DEFINED_ADDED: virDomainEventDefinedDetailType = 0;
pub const VIR_DOMAIN_EVENT_DEFINED_UPDATED: virDomainEventDefinedDetailType = 1;
pub const VIR_DOMAIN_EVENT_DEFINED_RENAMED: virDomainEventDefinedDetailType = 2;
pub const VIR_DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT: virDomainEventDefinedDetailType = 3;
pub type virDomainEventDefinedDetailType = u32;
pub const VIR_DOMAIN_EVENT_UNDEFINED_REMOVED: virDomainEventUndefinedDetailType = 0;
pub const VIR_DOMAIN_EVENT_UNDEFINED_RENAMED: virDomainEventUndefinedDetailType = 1;
pub type virDomainEventUndefinedDetailType = u32;
pub const VIR_DOMAIN_EVENT_STARTED_BOOTED: virDomainEventStartedDetailType = 0;
pub const VIR_DOMAIN_EVENT_STARTED_MIGRATED: virDomainEventStartedDetailType = 1;
pub const VIR_DOMAIN_EVENT_STARTED_RESTORED: virDomainEventStartedDetailType = 2;
pub const VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT: virDomainEventStartedDetailType = 3;
pub const VIR_DOMAIN_EVENT_STARTED_WAKEUP: virDomainEventStartedDetailType = 4;
pub type virDomainEventStartedDetailType = u32;
pub const VIR_DOMAIN_EVENT_SUSPENDED_PAUSED: virDomainEventSuspendedDetailType = 0;
pub const VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED: virDomainEventSuspendedDetailType = 1;
pub const VIR_DOMAIN_EVENT_SUSPENDED_IOERROR: virDomainEventSuspendedDetailType = 2;
pub const VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG: virDomainEventSuspendedDetailType = 3;
pub const VIR_DOMAIN_EVENT_SUSPENDED_RESTORED: virDomainEventSuspendedDetailType = 4;
pub const VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT: virDomainEventSuspendedDetailType = 5;
pub const VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR: virDomainEventSuspendedDetailType = 6;
pub const VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY: virDomainEventSuspendedDetailType = 7;
pub const VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED: virDomainEventSuspendedDetailType = 8;
pub type virDomainEventSuspendedDetailType = u32;
pub const VIR_DOMAIN_EVENT_RESUMED_UNPAUSED: virDomainEventResumedDetailType = 0;
pub const VIR_DOMAIN_EVENT_RESUMED_MIGRATED: virDomainEventResumedDetailType = 1;
pub const VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT: virDomainEventResumedDetailType = 2;
pub const VIR_DOMAIN_EVENT_RESUMED_POSTCOPY: virDomainEventResumedDetailType = 3;
pub type virDomainEventResumedDetailType = u32;
pub const VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN: virDomainEventStoppedDetailType = 0;
pub const VIR_DOMAIN_EVENT_STOPPED_DESTROYED: virDomainEventStoppedDetailType = 1;
pub const VIR_DOMAIN_EVENT_STOPPED_CRASHED: virDomainEventStoppedDetailType = 2;
pub const VIR_DOMAIN_EVENT_STOPPED_MIGRATED: virDomainEventStoppedDetailType = 3;
pub const VIR_DOMAIN_EVENT_STOPPED_SAVED: virDomainEventStoppedDetailType = 4;
pub const VIR_DOMAIN_EVENT_STOPPED_FAILED: virDomainEventStoppedDetailType = 5;
pub const VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT: virDomainEventStoppedDetailType = 6;
pub type virDomainEventStoppedDetailType = u32;
pub const VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED: virDomainEventShutdownDetailType = 0;
pub const VIR_DOMAIN_EVENT_SHUTDOWN_GUEST: virDomainEventShutdownDetailType = 1;
pub const VIR_DOMAIN_EVENT_SHUTDOWN_HOST: virDomainEventShutdownDetailType = 2;
pub type virDomainEventShutdownDetailType = u32;
pub const VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY: virDomainEventPMSuspendedDetailType = 0;
pub const VIR_DOMAIN_EVENT_PMSUSPENDED_DISK: virDomainEventPMSuspendedDetailType = 1;
pub type virDomainEventPMSuspendedDetailType = u32;
pub const VIR_DOMAIN_EVENT_CRASHED_PANICKED: virDomainEventCrashedDetailType = 0;
pub type virDomainEventCrashedDetailType = u32;
pub type virConnectDomainEventCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        event: ::std::os::raw::c_int,
        detail: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn virConnectDomainEventRegister(
        conn: virConnectPtr,
        cb: virConnectDomainEventCallback,
        opaque: *mut ::std::os::raw::c_void,
        freecb: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectDomainEventDeregister(
        conn: virConnectPtr,
        cb: virConnectDomainEventCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainIsActive(dom: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainIsPersistent(dom: virDomainPtr) -> ::std::os::raw::c_int;

    pub fn virDomainIsUpdated(dom: virDomainPtr) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_JOB_NONE: virDomainJobType = 0;
pub const VIR_DOMAIN_JOB_BOUNDED: virDomainJobType = 1;
pub const VIR_DOMAIN_JOB_UNBOUNDED: virDomainJobType = 2;
pub const VIR_DOMAIN_JOB_COMPLETED: virDomainJobType = 3;
pub const VIR_DOMAIN_JOB_FAILED: virDomainJobType = 4;
pub const VIR_DOMAIN_JOB_CANCELLED: virDomainJobType = 5;
pub type virDomainJobType = u32;
pub type virDomainJobInfo = _virDomainJobInfo;
pub type virDomainJobInfoPtr = *mut virDomainJobInfo;
#[repr(C)]
pub struct _virDomainJobInfo {
    pub type_: ::std::os::raw::c_int,
    pub timeElapsed: ::std::os::raw::c_ulonglong,
    pub timeRemaining: ::std::os::raw::c_ulonglong,
    pub dataTotal: ::std::os::raw::c_ulonglong,
    pub dataProcessed: ::std::os::raw::c_ulonglong,
    pub dataRemaining: ::std::os::raw::c_ulonglong,
    pub memTotal: ::std::os::raw::c_ulonglong,
    pub memProcessed: ::std::os::raw::c_ulonglong,
    pub memRemaining: ::std::os::raw::c_ulonglong,
    pub fileTotal: ::std::os::raw::c_ulonglong,
    pub fileProcessed: ::std::os::raw::c_ulonglong,
    pub fileRemaining: ::std::os::raw::c_ulonglong,
}
pub const VIR_DOMAIN_JOB_STATS_COMPLETED: virDomainGetJobStatsFlags = 1;
pub type virDomainGetJobStatsFlags = u32;
extern "C" {
    pub fn virDomainGetJobInfo(
        dom: virDomainPtr,
        info: virDomainJobInfoPtr,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetJobStats(
        domain: virDomainPtr,
        type_: *mut ::std::os::raw::c_int,
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainAbortJob(dom: virDomainPtr) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_JOB_OPERATION_UNKNOWN: virDomainJobOperation = 0;
pub const VIR_DOMAIN_JOB_OPERATION_START: virDomainJobOperation = 1;
pub const VIR_DOMAIN_JOB_OPERATION_SAVE: virDomainJobOperation = 2;
pub const VIR_DOMAIN_JOB_OPERATION_RESTORE: virDomainJobOperation = 3;
pub const VIR_DOMAIN_JOB_OPERATION_MIGRATION_IN: virDomainJobOperation = 4;
pub const VIR_DOMAIN_JOB_OPERATION_MIGRATION_OUT: virDomainJobOperation = 5;
pub const VIR_DOMAIN_JOB_OPERATION_SNAPSHOT: virDomainJobOperation = 6;
pub const VIR_DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT: virDomainJobOperation = 7;
pub const VIR_DOMAIN_JOB_OPERATION_DUMP: virDomainJobOperation = 8;
pub type virDomainJobOperation = u32;
pub type virConnectDomainEventGenericCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventRTCChangeCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        utcoffset: ::std::os::raw::c_longlong,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_DOMAIN_EVENT_WATCHDOG_NONE: virDomainEventWatchdogAction = 0;
pub const VIR_DOMAIN_EVENT_WATCHDOG_PAUSE: virDomainEventWatchdogAction = 1;
pub const VIR_DOMAIN_EVENT_WATCHDOG_RESET: virDomainEventWatchdogAction = 2;
pub const VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF: virDomainEventWatchdogAction = 3;
pub const VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN: virDomainEventWatchdogAction = 4;
pub const VIR_DOMAIN_EVENT_WATCHDOG_DEBUG: virDomainEventWatchdogAction = 5;
pub const VIR_DOMAIN_EVENT_WATCHDOG_INJECTNMI: virDomainEventWatchdogAction = 6;
pub type virDomainEventWatchdogAction = u32;
pub type virConnectDomainEventWatchdogCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        action: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_DOMAIN_EVENT_IO_ERROR_NONE: virDomainEventIOErrorAction = 0;
pub const VIR_DOMAIN_EVENT_IO_ERROR_PAUSE: virDomainEventIOErrorAction = 1;
pub const VIR_DOMAIN_EVENT_IO_ERROR_REPORT: virDomainEventIOErrorAction = 2;
pub type virDomainEventIOErrorAction = u32;
pub type virConnectDomainEventIOErrorCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        srcPath: *const ::std::os::raw::c_char,
        devAlias: *const ::std::os::raw::c_char,
        action: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventIOErrorReasonCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        srcPath: *const ::std::os::raw::c_char,
        devAlias: *const ::std::os::raw::c_char,
        action: ::std::os::raw::c_int,
        reason: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_DOMAIN_EVENT_GRAPHICS_CONNECT: virDomainEventGraphicsPhase = 0;
pub const VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE: virDomainEventGraphicsPhase = 1;
pub const VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT: virDomainEventGraphicsPhase = 2;
pub type virDomainEventGraphicsPhase = u32;
pub const VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4: virDomainEventGraphicsAddressType = 0;
pub const VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6: virDomainEventGraphicsAddressType = 1;
pub const VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX: virDomainEventGraphicsAddressType = 2;
pub type virDomainEventGraphicsAddressType = u32;
#[repr(C)]
pub struct _virDomainEventGraphicsAddress {
    pub family: ::std::os::raw::c_int,
    pub node: *mut ::std::os::raw::c_char,
    pub service: *mut ::std::os::raw::c_char,
}
pub type virDomainEventGraphicsAddress = _virDomainEventGraphicsAddress;
pub type virDomainEventGraphicsAddressPtr = *mut virDomainEventGraphicsAddress;
#[repr(C)]
pub struct _virDomainEventGraphicsSubjectIdentity {
    pub type_: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
}
pub type virDomainEventGraphicsSubjectIdentity = _virDomainEventGraphicsSubjectIdentity;
pub type virDomainEventGraphicsSubjectIdentityPtr = *mut virDomainEventGraphicsSubjectIdentity;
#[repr(C)]
pub struct _virDomainEventGraphicsSubject {
    pub nidentity: ::std::os::raw::c_int,
    pub identities: virDomainEventGraphicsSubjectIdentityPtr,
}
pub type virDomainEventGraphicsSubject = _virDomainEventGraphicsSubject;
pub type virDomainEventGraphicsSubjectPtr = *mut virDomainEventGraphicsSubject;
pub type virConnectDomainEventGraphicsCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        phase: ::std::os::raw::c_int,
        local: *const virDomainEventGraphicsAddress,
        remote: *const virDomainEventGraphicsAddress,
        authScheme: *const ::std::os::raw::c_char,
        subject: *const virDomainEventGraphicsSubject,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_DOMAIN_BLOCK_JOB_COMPLETED: virConnectDomainEventBlockJobStatus = 0;
pub const VIR_DOMAIN_BLOCK_JOB_FAILED: virConnectDomainEventBlockJobStatus = 1;
pub const VIR_DOMAIN_BLOCK_JOB_CANCELED: virConnectDomainEventBlockJobStatus = 2;
pub const VIR_DOMAIN_BLOCK_JOB_READY: virConnectDomainEventBlockJobStatus = 3;
pub type virConnectDomainEventBlockJobStatus = u32;
pub type virConnectDomainEventBlockJobCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        disk: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        status: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START: virConnectDomainEventDiskChangeReason = 0;
pub const VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START: virConnectDomainEventDiskChangeReason = 1;
pub type virConnectDomainEventDiskChangeReason = u32;
pub type virConnectDomainEventDiskChangeCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        oldSrcPath: *const ::std::os::raw::c_char,
        newSrcPath: *const ::std::os::raw::c_char,
        devAlias: *const ::std::os::raw::c_char,
        reason: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN: virDomainEventTrayChangeReason = 0;
pub const VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE: virDomainEventTrayChangeReason = 1;
pub type virDomainEventTrayChangeReason = u32;
pub type virConnectDomainEventTrayChangeCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        devAlias: *const ::std::os::raw::c_char,
        reason: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventPMWakeupCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        reason: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventPMSuspendCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        reason: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventBalloonChangeCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        actual: ::std::os::raw::c_ulonglong,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventPMSuspendDiskCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        reason: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventDeviceRemovedCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        devAlias: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventDeviceAddedCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        devAlias: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventDeviceRemovalFailedCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        devAlias: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventMetadataChangeCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        type_: ::std::os::raw::c_int,
        nsuri: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventMigrationIterationCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        iteration: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventJobCompletedCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventTunableCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED:
    virConnectDomainEventAgentLifecycleState = 1;
pub const VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED:
    virConnectDomainEventAgentLifecycleState = 2;
pub type virConnectDomainEventAgentLifecycleState = u32;
pub const VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN:
    virConnectDomainEventAgentLifecycleReason = 0;
pub const VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED:
    virConnectDomainEventAgentLifecycleReason = 1;
pub const VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL:
    virConnectDomainEventAgentLifecycleReason = 2;
pub type virConnectDomainEventAgentLifecycleReason = u32;
pub type virConnectDomainEventAgentLifecycleCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        state: ::std::os::raw::c_int,
        reason: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virConnectDomainEventBlockThresholdCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dom: virDomainPtr,
        dev: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        threshold: ::std::os::raw::c_ulonglong,
        excess: ::std::os::raw::c_ulonglong,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_DOMAIN_EVENT_ID_LIFECYCLE: virDomainEventID = 0;
pub const VIR_DOMAIN_EVENT_ID_REBOOT: virDomainEventID = 1;
pub const VIR_DOMAIN_EVENT_ID_RTC_CHANGE: virDomainEventID = 2;
pub const VIR_DOMAIN_EVENT_ID_WATCHDOG: virDomainEventID = 3;
pub const VIR_DOMAIN_EVENT_ID_IO_ERROR: virDomainEventID = 4;
pub const VIR_DOMAIN_EVENT_ID_GRAPHICS: virDomainEventID = 5;
pub const VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON: virDomainEventID = 6;
pub const VIR_DOMAIN_EVENT_ID_CONTROL_ERROR: virDomainEventID = 7;
pub const VIR_DOMAIN_EVENT_ID_BLOCK_JOB: virDomainEventID = 8;
pub const VIR_DOMAIN_EVENT_ID_DISK_CHANGE: virDomainEventID = 9;
pub const VIR_DOMAIN_EVENT_ID_TRAY_CHANGE: virDomainEventID = 10;
pub const VIR_DOMAIN_EVENT_ID_PMWAKEUP: virDomainEventID = 11;
pub const VIR_DOMAIN_EVENT_ID_PMSUSPEND: virDomainEventID = 12;
pub const VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE: virDomainEventID = 13;
pub const VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK: virDomainEventID = 14;
pub const VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED: virDomainEventID = 15;
pub const VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2: virDomainEventID = 16;
pub const VIR_DOMAIN_EVENT_ID_TUNABLE: virDomainEventID = 17;
pub const VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE: virDomainEventID = 18;
pub const VIR_DOMAIN_EVENT_ID_DEVICE_ADDED: virDomainEventID = 19;
pub const VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION: virDomainEventID = 20;
pub const VIR_DOMAIN_EVENT_ID_JOB_COMPLETED: virDomainEventID = 21;
pub const VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED: virDomainEventID = 22;
pub const VIR_DOMAIN_EVENT_ID_METADATA_CHANGE: virDomainEventID = 23;
pub const VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD: virDomainEventID = 24;
pub type virDomainEventID = u32;
extern "C" {
    pub fn virConnectDomainEventRegisterAny(
        conn: virConnectPtr,
        dom: virDomainPtr,
        eventID: ::std::os::raw::c_int,
        cb: virConnectDomainEventGenericCallback,
        opaque: *mut ::std::os::raw::c_void,
        freecb: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectDomainEventDeregisterAny(
        conn: virConnectPtr,
        callbackID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_CONSOLE_FORCE: virDomainConsoleFlags = 1;
pub const VIR_DOMAIN_CONSOLE_SAFE: virDomainConsoleFlags = 2;
pub type virDomainConsoleFlags = u32;
extern "C" {
    pub fn virDomainOpenConsole(
        dom: virDomainPtr,
        dev_name: *const ::std::os::raw::c_char,
        st: virStreamPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_CHANNEL_FORCE: virDomainChannelFlags = 1;
pub type virDomainChannelFlags = u32;
extern "C" {
    pub fn virDomainOpenChannel(
        dom: virDomainPtr,
        name: *const ::std::os::raw::c_char,
        st: virStreamPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH: virDomainOpenGraphicsFlags = 1;
pub type virDomainOpenGraphicsFlags = u32;
extern "C" {
    pub fn virDomainOpenGraphics(
        dom: virDomainPtr,
        idx: ::std::os::raw::c_uint,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainOpenGraphicsFD(
        dom: virDomainPtr,
        idx: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainInjectNMI(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainFSTrim(
        dom: virDomainPtr,
        mountPoint: *const ::std::os::raw::c_char,
        minimum: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainFSFreeze(
        dom: virDomainPtr,
        mountpoints: *mut *const ::std::os::raw::c_char,
        nmountpoints: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainFSThaw(
        dom: virDomainPtr,
        mountpoints: *mut *const ::std::os::raw::c_char,
        nmountpoints: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virDomainFSInfo = _virDomainFSInfo;
pub type virDomainFSInfoPtr = *mut virDomainFSInfo;
#[repr(C)]
pub struct _virDomainFSInfo {
    pub mountpoint: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub fstype: *mut ::std::os::raw::c_char,
    pub ndevAlias: usize,
    pub devAlias: *mut *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn virDomainFSInfoFree(info: virDomainFSInfoPtr);

    pub fn virDomainGetFSInfo(
        dom: virDomainPtr,
        info: *mut *mut virDomainFSInfoPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetTime(
        dom: virDomainPtr,
        seconds: *mut ::std::os::raw::c_longlong,
        nseconds: *mut ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_TIME_SYNC: virDomainSetTimeFlags = 1;
pub type virDomainSetTimeFlags = u32;
extern "C" {
    pub fn virDomainSetTime(
        dom: virDomainPtr,
        seconds: ::std::os::raw::c_longlong,
        nseconds: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_SCHED_FIELD_INT: virSchedParameterType = 1;
pub const VIR_DOMAIN_SCHED_FIELD_UINT: virSchedParameterType = 2;
pub const VIR_DOMAIN_SCHED_FIELD_LLONG: virSchedParameterType = 3;
pub const VIR_DOMAIN_SCHED_FIELD_ULLONG: virSchedParameterType = 4;
pub const VIR_DOMAIN_SCHED_FIELD_DOUBLE: virSchedParameterType = 5;
pub const VIR_DOMAIN_SCHED_FIELD_BOOLEAN: virSchedParameterType = 6;
pub type virSchedParameterType = u32;
pub type virSchedParameter = _virTypedParameter;
pub type virSchedParameterPtr = *mut virSchedParameter;
pub const VIR_DOMAIN_BLKIO_PARAM_INT: virBlkioParameterType = 1;
pub const VIR_DOMAIN_BLKIO_PARAM_UINT: virBlkioParameterType = 2;
pub const VIR_DOMAIN_BLKIO_PARAM_LLONG: virBlkioParameterType = 3;
pub const VIR_DOMAIN_BLKIO_PARAM_ULLONG: virBlkioParameterType = 4;
pub const VIR_DOMAIN_BLKIO_PARAM_DOUBLE: virBlkioParameterType = 5;
pub const VIR_DOMAIN_BLKIO_PARAM_BOOLEAN: virBlkioParameterType = 6;
pub type virBlkioParameterType = u32;
pub type virBlkioParameter = _virTypedParameter;
pub type virBlkioParameterPtr = *mut virBlkioParameter;
pub const VIR_DOMAIN_MEMORY_PARAM_INT: virMemoryParameterType = 1;
pub const VIR_DOMAIN_MEMORY_PARAM_UINT: virMemoryParameterType = 2;
pub const VIR_DOMAIN_MEMORY_PARAM_LLONG: virMemoryParameterType = 3;
pub const VIR_DOMAIN_MEMORY_PARAM_ULLONG: virMemoryParameterType = 4;
pub const VIR_DOMAIN_MEMORY_PARAM_DOUBLE: virMemoryParameterType = 5;
pub const VIR_DOMAIN_MEMORY_PARAM_BOOLEAN: virMemoryParameterType = 6;
pub type virMemoryParameterType = u32;
pub type virMemoryParameter = _virTypedParameter;
pub type virMemoryParameterPtr = *mut virMemoryParameter;
pub const VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE: virDomainInterfaceAddressesSource = 0;
pub const VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT: virDomainInterfaceAddressesSource = 1;
pub const VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP: virDomainInterfaceAddressesSource = 2;
pub type virDomainInterfaceAddressesSource = u32;
pub type virDomainIPAddress = _virDomainInterfaceIPAddress;
pub type virDomainIPAddressPtr = *mut virDomainIPAddress;
#[repr(C)]
pub struct _virDomainInterfaceIPAddress {
    pub type_: ::std::os::raw::c_int,
    pub addr: *mut ::std::os::raw::c_char,
    pub prefix: ::std::os::raw::c_uint,
}
pub type virDomainInterface = _virDomainInterface;
pub type virDomainInterfacePtr = *mut virDomainInterface;
#[repr(C)]
pub struct _virDomainInterface {
    pub name: *mut ::std::os::raw::c_char,
    pub hwaddr: *mut ::std::os::raw::c_char,
    pub naddrs: ::std::os::raw::c_uint,
    pub addrs: virDomainIPAddressPtr,
}
extern "C" {
    pub fn virDomainInterfaceAddresses(
        dom: virDomainPtr,
        ifaces: *mut *mut virDomainInterfacePtr,
        source: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainInterfaceFree(iface: virDomainInterfacePtr);
}
pub const VIR_DOMAIN_PASSWORD_ENCRYPTED: virDomainSetUserPasswordFlags = 1;
pub type virDomainSetUserPasswordFlags = u32;
extern "C" {
    pub fn virDomainSetUserPassword(
        dom: virDomainPtr,
        user: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainRename(
        dom: virDomainPtr,
        new_name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetGuestVcpus(
        domain: virDomainPtr,
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetGuestVcpus(
        domain: virDomainPtr,
        cpumap: *const ::std::os::raw::c_char,
        state: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetVcpu(
        domain: virDomainPtr,
        vcpumap: *const ::std::os::raw::c_char,
        state: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSetBlockThreshold(
        domain: virDomainPtr,
        dev: *const ::std::os::raw::c_char,
        threshold: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_LIFECYCLE_POWEROFF: virDomainLifecycle = 0;
pub const VIR_DOMAIN_LIFECYCLE_REBOOT: virDomainLifecycle = 1;
pub const VIR_DOMAIN_LIFECYCLE_CRASH: virDomainLifecycle = 2;
pub type virDomainLifecycle = u32;
pub const VIR_DOMAIN_LIFECYCLE_ACTION_DESTROY: virDomainLifecycleAction = 0;
pub const VIR_DOMAIN_LIFECYCLE_ACTION_RESTART: virDomainLifecycleAction = 1;
pub const VIR_DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME: virDomainLifecycleAction = 2;
pub const VIR_DOMAIN_LIFECYCLE_ACTION_PRESERVE: virDomainLifecycleAction = 3;
pub const VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY: virDomainLifecycleAction = 4;
pub const VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART: virDomainLifecycleAction = 5;
pub type virDomainLifecycleAction = u32;
extern "C" {
    pub fn virDomainSetLifecycleAction(
        domain: virDomainPtr,
        type_: ::std::os::raw::c_uint,
        action: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainGetLaunchSecurityInfo(
        domain: virDomainPtr,
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _virDomainCheckpoint(::std::os::raw::c_void);

pub type virDomainCheckpoint = _virDomainCheckpoint;
pub type virDomainCheckpointPtr = *mut virDomainCheckpoint;
extern "C" {
    pub fn virDomainCheckpointGetName(
        checkpoint: virDomainCheckpointPtr,
    ) -> *const ::std::os::raw::c_char;

    pub fn virDomainCheckpointGetDomain(checkpoint: virDomainCheckpointPtr) -> virDomainPtr;

    pub fn virDomainCheckpointGetConnect(checkpoint: virDomainCheckpointPtr) -> virConnectPtr;
}
pub const VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE: virDomainCheckpointCreateFlags = 1;
pub const VIR_DOMAIN_CHECKPOINT_CREATE_QUIESCE: virDomainCheckpointCreateFlags = 2;
pub type virDomainCheckpointCreateFlags = u32;
extern "C" {
    pub fn virDomainCheckpointCreateXML(
        domain: virDomainPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainCheckpointPtr;
}
pub const VIR_DOMAIN_CHECKPOINT_XML_SECURE: virDomainCheckpointXMLFlags = 1;
pub const VIR_DOMAIN_CHECKPOINT_XML_NO_DOMAIN: virDomainCheckpointXMLFlags = 2;
pub const VIR_DOMAIN_CHECKPOINT_XML_SIZE: virDomainCheckpointXMLFlags = 4;
pub type virDomainCheckpointXMLFlags = u32;
extern "C" {
    pub fn virDomainCheckpointGetXMLDesc(
        checkpoint: virDomainCheckpointPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
pub const VIR_DOMAIN_CHECKPOINT_LIST_ROOTS: virDomainCheckpointListFlags = 1;
pub const VIR_DOMAIN_CHECKPOINT_LIST_DESCENDANTS: virDomainCheckpointListFlags = 1;
pub const VIR_DOMAIN_CHECKPOINT_LIST_TOPOLOGICAL: virDomainCheckpointListFlags = 2;
pub const VIR_DOMAIN_CHECKPOINT_LIST_LEAVES: virDomainCheckpointListFlags = 4;
pub const VIR_DOMAIN_CHECKPOINT_LIST_NO_LEAVES: virDomainCheckpointListFlags = 8;
pub type virDomainCheckpointListFlags = u32;
extern "C" {
    pub fn virDomainListAllCheckpoints(
        domain: virDomainPtr,
        checkpoints: *mut *mut virDomainCheckpointPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCheckpointListAllChildren(
        checkpoint: virDomainCheckpointPtr,
        children: *mut *mut virDomainCheckpointPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCheckpointLookupByName(
        domain: virDomainPtr,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainCheckpointPtr;

    pub fn virDomainCheckpointGetParent(
        checkpoint: virDomainCheckpointPtr,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainCheckpointPtr;
}
pub const VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN: virDomainCheckpointDeleteFlags = 1;
pub const VIR_DOMAIN_CHECKPOINT_DELETE_METADATA_ONLY: virDomainCheckpointDeleteFlags = 2;
pub const VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN_ONLY: virDomainCheckpointDeleteFlags = 4;
pub type virDomainCheckpointDeleteFlags = u32;
extern "C" {
    pub fn virDomainCheckpointDelete(
        checkpoint: virDomainCheckpointPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainCheckpointRef(checkpoint: virDomainCheckpointPtr) -> ::std::os::raw::c_int;

    pub fn virDomainCheckpointFree(checkpoint: virDomainCheckpointPtr) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _virDomainSnapshot(::std::os::raw::c_void);

pub type virDomainSnapshot = _virDomainSnapshot;
pub type virDomainSnapshotPtr = *mut virDomainSnapshot;
extern "C" {
    pub fn virDomainSnapshotGetName(
        snapshot: virDomainSnapshotPtr,
    ) -> *const ::std::os::raw::c_char;

    pub fn virDomainSnapshotGetDomain(snapshot: virDomainSnapshotPtr) -> virDomainPtr;

    pub fn virDomainSnapshotGetConnect(snapshot: virDomainSnapshotPtr) -> virConnectPtr;
}
pub const VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE: virDomainSnapshotCreateFlags = 1;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT: virDomainSnapshotCreateFlags = 2;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA: virDomainSnapshotCreateFlags = 4;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_HALT: virDomainSnapshotCreateFlags = 8;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY: virDomainSnapshotCreateFlags = 16;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT: virDomainSnapshotCreateFlags = 32;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE: virDomainSnapshotCreateFlags = 64;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC: virDomainSnapshotCreateFlags = 128;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_LIVE: virDomainSnapshotCreateFlags = 256;
pub const VIR_DOMAIN_SNAPSHOT_CREATE_VALIDATE: virDomainSnapshotCreateFlags = 512;
pub type virDomainSnapshotCreateFlags = u32;
extern "C" {
    pub fn virDomainSnapshotCreateXML(
        domain: virDomainPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainSnapshotPtr;
}
pub const VIR_DOMAIN_SNAPSHOT_XML_SECURE: virDomainSnapshotXMLFlags = 1;
pub type virDomainSnapshotXMLFlags = u32;
extern "C" {
    pub fn virDomainSnapshotGetXMLDesc(
        snapshot: virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
pub const VIR_DOMAIN_SNAPSHOT_LIST_ROOTS: virDomainSnapshotListFlags = 1;
pub const VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS: virDomainSnapshotListFlags = 1;
pub const VIR_DOMAIN_SNAPSHOT_LIST_LEAVES: virDomainSnapshotListFlags = 4;
pub const VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES: virDomainSnapshotListFlags = 8;
pub const VIR_DOMAIN_SNAPSHOT_LIST_METADATA: virDomainSnapshotListFlags = 2;
pub const VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA: virDomainSnapshotListFlags = 16;
pub const VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE: virDomainSnapshotListFlags = 32;
pub const VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE: virDomainSnapshotListFlags = 64;
pub const VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY: virDomainSnapshotListFlags = 128;
pub const VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL: virDomainSnapshotListFlags = 256;
pub const VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL: virDomainSnapshotListFlags = 512;
pub const VIR_DOMAIN_SNAPSHOT_LIST_TOPOLOGICAL: virDomainSnapshotListFlags = 1024;
pub type virDomainSnapshotListFlags = u32;
extern "C" {
    pub fn virDomainSnapshotNum(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotListNames(
        domain: virDomainPtr,
        names: *mut *mut ::std::os::raw::c_char,
        nameslen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainListAllSnapshots(
        domain: virDomainPtr,
        snaps: *mut *mut virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotNumChildren(
        snapshot: virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotListChildrenNames(
        snapshot: virDomainSnapshotPtr,
        names: *mut *mut ::std::os::raw::c_char,
        nameslen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotListAllChildren(
        snapshot: virDomainSnapshotPtr,
        snaps: *mut *mut virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotLookupByName(
        domain: virDomainPtr,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainSnapshotPtr;

    pub fn virDomainHasCurrentSnapshot(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotCurrent(
        domain: virDomainPtr,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainSnapshotPtr;

    pub fn virDomainSnapshotGetParent(
        snapshot: virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> virDomainSnapshotPtr;

    pub fn virDomainSnapshotIsCurrent(
        snapshot: virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotHasMetadata(
        snapshot: virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING: virDomainSnapshotRevertFlags = 1;
pub const VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED: virDomainSnapshotRevertFlags = 2;
pub const VIR_DOMAIN_SNAPSHOT_REVERT_FORCE: virDomainSnapshotRevertFlags = 4;
pub type virDomainSnapshotRevertFlags = u32;
extern "C" {
    pub fn virDomainRevertToSnapshot(
        snapshot: virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN: virDomainSnapshotDeleteFlags = 1;
pub const VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY: virDomainSnapshotDeleteFlags = 2;
pub const VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY: virDomainSnapshotDeleteFlags = 4;
pub type virDomainSnapshotDeleteFlags = u32;
extern "C" {
    pub fn virDomainSnapshotDelete(
        snapshot: virDomainSnapshotPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotRef(snapshot: virDomainSnapshotPtr) -> ::std::os::raw::c_int;

    pub fn virDomainSnapshotFree(snapshot: virDomainSnapshotPtr) -> ::std::os::raw::c_int;
}
pub const VIR_EVENT_HANDLE_READABLE: virEventHandleType = 1;
pub const VIR_EVENT_HANDLE_WRITABLE: virEventHandleType = 2;
pub const VIR_EVENT_HANDLE_ERROR: virEventHandleType = 4;
pub const VIR_EVENT_HANDLE_HANGUP: virEventHandleType = 8;
pub type virEventHandleType = u32;
pub type virEventHandleCallback = Option<
    unsafe extern "C" fn(
        watch: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
        events: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub type virEventAddHandleFunc = Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        event: ::std::os::raw::c_int,
        cb: virEventHandleCallback,
        opaque: *mut ::std::os::raw::c_void,
        ff: virFreeCallback,
    ) -> ::std::os::raw::c_int,
>;
pub type virEventUpdateHandleFunc =
    Option<unsafe extern "C" fn(watch: ::std::os::raw::c_int, event: ::std::os::raw::c_int)>;
pub type virEventRemoveHandleFunc =
    Option<unsafe extern "C" fn(watch: ::std::os::raw::c_int) -> ::std::os::raw::c_int>;
pub type virEventTimeoutCallback =
    Option<unsafe extern "C" fn(timer: ::std::os::raw::c_int, opaque: *mut ::std::os::raw::c_void)>;
pub type virEventAddTimeoutFunc = Option<
    unsafe extern "C" fn(
        timeout: ::std::os::raw::c_int,
        cb: virEventTimeoutCallback,
        opaque: *mut ::std::os::raw::c_void,
        ff: virFreeCallback,
    ) -> ::std::os::raw::c_int,
>;
pub type virEventUpdateTimeoutFunc =
    Option<unsafe extern "C" fn(timer: ::std::os::raw::c_int, timeout: ::std::os::raw::c_int)>;
pub type virEventRemoveTimeoutFunc =
    Option<unsafe extern "C" fn(timer: ::std::os::raw::c_int) -> ::std::os::raw::c_int>;
extern "C" {
    pub fn virEventRegisterImpl(
        addHandle: virEventAddHandleFunc,
        updateHandle: virEventUpdateHandleFunc,
        removeHandle: virEventRemoveHandleFunc,
        addTimeout: virEventAddTimeoutFunc,
        updateTimeout: virEventUpdateTimeoutFunc,
        removeTimeout: virEventRemoveTimeoutFunc,
    );

    pub fn virEventRegisterDefaultImpl() -> ::std::os::raw::c_int;

    pub fn virEventRunDefaultImpl() -> ::std::os::raw::c_int;

    pub fn virEventAddHandle(
        fd: ::std::os::raw::c_int,
        events: ::std::os::raw::c_int,
        cb: virEventHandleCallback,
        opaque: *mut ::std::os::raw::c_void,
        ff: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virEventUpdateHandle(watch: ::std::os::raw::c_int, events: ::std::os::raw::c_int);

    pub fn virEventRemoveHandle(watch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;

    pub fn virEventAddTimeout(
        frequency: ::std::os::raw::c_int,
        cb: virEventTimeoutCallback,
        opaque: *mut ::std::os::raw::c_void,
        ff: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virEventUpdateTimeout(timer: ::std::os::raw::c_int, frequency: ::std::os::raw::c_int);

    pub fn virEventRemoveTimeout(timer: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _virInterface(::std::os::raw::c_void);

pub type virInterface = _virInterface;
pub type virInterfacePtr = *mut virInterface;
extern "C" {
    pub fn virInterfaceGetConnect(iface: virInterfacePtr) -> virConnectPtr;

    pub fn virConnectNumOfInterfaces(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListInterfaces(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectNumOfDefinedInterfaces(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListDefinedInterfaces(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_LIST_INTERFACES_INACTIVE: virConnectListAllInterfacesFlags = 1;
pub const VIR_CONNECT_LIST_INTERFACES_ACTIVE: virConnectListAllInterfacesFlags = 2;
pub type virConnectListAllInterfacesFlags = u32;
extern "C" {
    pub fn virConnectListAllInterfaces(
        conn: virConnectPtr,
        ifaces: *mut *mut virInterfacePtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virInterfaceLookupByName(
        conn: virConnectPtr,
        name: *const ::std::os::raw::c_char,
    ) -> virInterfacePtr;

    pub fn virInterfaceLookupByMACString(
        conn: virConnectPtr,
        mac: *const ::std::os::raw::c_char,
    ) -> virInterfacePtr;

    pub fn virInterfaceGetName(iface: virInterfacePtr) -> *const ::std::os::raw::c_char;

    pub fn virInterfaceGetMACString(iface: virInterfacePtr) -> *const ::std::os::raw::c_char;
}
pub const VIR_INTERFACE_XML_INACTIVE: virInterfaceXMLFlags = 1;
pub type virInterfaceXMLFlags = u32;
extern "C" {
    pub fn virInterfaceGetXMLDesc(
        iface: virInterfacePtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virInterfaceDefineXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virInterfacePtr;

    pub fn virInterfaceUndefine(iface: virInterfacePtr) -> ::std::os::raw::c_int;

    pub fn virInterfaceCreate(
        iface: virInterfacePtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virInterfaceDestroy(
        iface: virInterfacePtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virInterfaceRef(iface: virInterfacePtr) -> ::std::os::raw::c_int;

    pub fn virInterfaceFree(iface: virInterfacePtr) -> ::std::os::raw::c_int;

    pub fn virInterfaceChangeBegin(
        conn: virConnectPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virInterfaceChangeCommit(
        conn: virConnectPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virInterfaceChangeRollback(
        conn: virConnectPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virInterfaceIsActive(iface: virInterfacePtr) -> ::std::os::raw::c_int;
}
pub const VIR_NETWORK_XML_INACTIVE: virNetworkXMLFlags = 1;
pub type virNetworkXMLFlags = u32;
#[repr(C)]
pub struct _virNetwork(::std::os::raw::c_void);

pub type virNetwork = _virNetwork;
pub type virNetworkPtr = *mut virNetwork;
#[repr(C)]
pub struct _virNetworkPort(::std::os::raw::c_void);

pub type virNetworkPort = _virNetworkPort;
pub type virNetworkPortPtr = *mut virNetworkPort;
extern "C" {
    pub fn virNetworkGetConnect(network: virNetworkPtr) -> virConnectPtr;

    pub fn virConnectNumOfNetworks(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListNetworks(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectNumOfDefinedNetworks(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListDefinedNetworks(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_LIST_NETWORKS_INACTIVE: virConnectListAllNetworksFlags = 1;
pub const VIR_CONNECT_LIST_NETWORKS_ACTIVE: virConnectListAllNetworksFlags = 2;
pub const VIR_CONNECT_LIST_NETWORKS_PERSISTENT: virConnectListAllNetworksFlags = 4;
pub const VIR_CONNECT_LIST_NETWORKS_TRANSIENT: virConnectListAllNetworksFlags = 8;
pub const VIR_CONNECT_LIST_NETWORKS_AUTOSTART: virConnectListAllNetworksFlags = 16;
pub const VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART: virConnectListAllNetworksFlags = 32;
pub type virConnectListAllNetworksFlags = u32;
extern "C" {
    pub fn virConnectListAllNetworks(
        conn: virConnectPtr,
        nets: *mut *mut virNetworkPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkLookupByName(
        conn: virConnectPtr,
        name: *const ::std::os::raw::c_char,
    ) -> virNetworkPtr;

    pub fn virNetworkLookupByUUID(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_uchar,
    ) -> virNetworkPtr;

    pub fn virNetworkLookupByUUIDString(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_char,
    ) -> virNetworkPtr;

    pub fn virNetworkCreateXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
    ) -> virNetworkPtr;

    pub fn virNetworkDefineXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
    ) -> virNetworkPtr;

    pub fn virNetworkUndefine(network: virNetworkPtr) -> ::std::os::raw::c_int;
}
pub const VIR_NETWORK_UPDATE_COMMAND_NONE: virNetworkUpdateCommand = 0;
pub const VIR_NETWORK_UPDATE_COMMAND_MODIFY: virNetworkUpdateCommand = 1;
pub const VIR_NETWORK_UPDATE_COMMAND_DELETE: virNetworkUpdateCommand = 2;
pub const VIR_NETWORK_UPDATE_COMMAND_ADD_LAST: virNetworkUpdateCommand = 3;
pub const VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST: virNetworkUpdateCommand = 4;
pub type virNetworkUpdateCommand = u32;
pub const VIR_NETWORK_SECTION_NONE: virNetworkUpdateSection = 0;
pub const VIR_NETWORK_SECTION_BRIDGE: virNetworkUpdateSection = 1;
pub const VIR_NETWORK_SECTION_DOMAIN: virNetworkUpdateSection = 2;
pub const VIR_NETWORK_SECTION_IP: virNetworkUpdateSection = 3;
pub const VIR_NETWORK_SECTION_IP_DHCP_HOST: virNetworkUpdateSection = 4;
pub const VIR_NETWORK_SECTION_IP_DHCP_RANGE: virNetworkUpdateSection = 5;
pub const VIR_NETWORK_SECTION_FORWARD: virNetworkUpdateSection = 6;
pub const VIR_NETWORK_SECTION_FORWARD_INTERFACE: virNetworkUpdateSection = 7;
pub const VIR_NETWORK_SECTION_FORWARD_PF: virNetworkUpdateSection = 8;
pub const VIR_NETWORK_SECTION_PORTGROUP: virNetworkUpdateSection = 9;
pub const VIR_NETWORK_SECTION_DNS_HOST: virNetworkUpdateSection = 10;
pub const VIR_NETWORK_SECTION_DNS_TXT: virNetworkUpdateSection = 11;
pub const VIR_NETWORK_SECTION_DNS_SRV: virNetworkUpdateSection = 12;
pub type virNetworkUpdateSection = u32;
pub const VIR_NETWORK_UPDATE_AFFECT_CURRENT: virNetworkUpdateFlags = 0;
pub const VIR_NETWORK_UPDATE_AFFECT_LIVE: virNetworkUpdateFlags = 1;
pub const VIR_NETWORK_UPDATE_AFFECT_CONFIG: virNetworkUpdateFlags = 2;
pub type virNetworkUpdateFlags = u32;
extern "C" {
    pub fn virNetworkUpdate(
        network: virNetworkPtr,
        command: ::std::os::raw::c_uint,
        section: ::std::os::raw::c_uint,
        parentIndex: ::std::os::raw::c_int,
        xml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkCreate(network: virNetworkPtr) -> ::std::os::raw::c_int;

    pub fn virNetworkDestroy(network: virNetworkPtr) -> ::std::os::raw::c_int;

    pub fn virNetworkRef(network: virNetworkPtr) -> ::std::os::raw::c_int;

    pub fn virNetworkFree(network: virNetworkPtr) -> ::std::os::raw::c_int;

    pub fn virNetworkGetName(network: virNetworkPtr) -> *const ::std::os::raw::c_char;

    pub fn virNetworkGetUUID(
        network: virNetworkPtr,
        uuid: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkGetUUIDString(
        network: virNetworkPtr,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkGetXMLDesc(
        network: virNetworkPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virNetworkGetBridgeName(network: virNetworkPtr) -> *mut ::std::os::raw::c_char;

    pub fn virNetworkGetAutostart(
        network: virNetworkPtr,
        autostart: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkSetAutostart(
        network: virNetworkPtr,
        autostart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkIsActive(net: virNetworkPtr) -> ::std::os::raw::c_int;

    pub fn virNetworkIsPersistent(net: virNetworkPtr) -> ::std::os::raw::c_int;
}
pub const VIR_NETWORK_EVENT_DEFINED: virNetworkEventLifecycleType = 0;
pub const VIR_NETWORK_EVENT_UNDEFINED: virNetworkEventLifecycleType = 1;
pub const VIR_NETWORK_EVENT_STARTED: virNetworkEventLifecycleType = 2;
pub const VIR_NETWORK_EVENT_STOPPED: virNetworkEventLifecycleType = 3;
pub type virNetworkEventLifecycleType = u32;
pub type virConnectNetworkEventLifecycleCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        net: virNetworkPtr,
        event: ::std::os::raw::c_int,
        detail: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_NETWORK_EVENT_ID_LIFECYCLE: virNetworkEventID = 0;
pub type virNetworkEventID = u32;
pub const VIR_IP_ADDR_TYPE_IPV4: virIPAddrType = 0;
pub const VIR_IP_ADDR_TYPE_IPV6: virIPAddrType = 1;
pub type virIPAddrType = u32;
pub type virNetworkDHCPLease = _virNetworkDHCPLease;
pub type virNetworkDHCPLeasePtr = *mut virNetworkDHCPLease;
#[repr(C)]
pub struct _virNetworkDHCPLease {
    pub iface: *mut ::std::os::raw::c_char,
    pub expirytime: ::std::os::raw::c_longlong,
    pub type_: ::std::os::raw::c_int,
    pub mac: *mut ::std::os::raw::c_char,
    pub iaid: *mut ::std::os::raw::c_char,
    pub ipaddr: *mut ::std::os::raw::c_char,
    pub prefix: ::std::os::raw::c_uint,
    pub hostname: *mut ::std::os::raw::c_char,
    pub clientid: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn virNetworkDHCPLeaseFree(lease: virNetworkDHCPLeasePtr);

    pub fn virNetworkGetDHCPLeases(
        network: virNetworkPtr,
        mac: *const ::std::os::raw::c_char,
        leases: *mut *mut virNetworkDHCPLeasePtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virConnectNetworkEventGenericCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        net: virNetworkPtr,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn virConnectNetworkEventRegisterAny(
        conn: virConnectPtr,
        net: virNetworkPtr,
        eventID: ::std::os::raw::c_int,
        cb: virConnectNetworkEventGenericCallback,
        opaque: *mut ::std::os::raw::c_void,
        freecb: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectNetworkEventDeregisterAny(
        conn: virConnectPtr,
        callbackID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkPortLookupByUUID(
        net: virNetworkPtr,
        uuid: *const ::std::os::raw::c_uchar,
    ) -> virNetworkPortPtr;

    pub fn virNetworkPortLookupByUUIDString(
        net: virNetworkPtr,
        uuidstr: *const ::std::os::raw::c_char,
    ) -> virNetworkPortPtr;
}
pub const VIR_NETWORK_PORT_CREATE_RECLAIM: virNetworkPortCreateFlags = 1;
pub type virNetworkPortCreateFlags = u32;
extern "C" {
    pub fn virNetworkPortCreateXML(
        net: virNetworkPtr,
        xmldesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virNetworkPortPtr;

    pub fn virNetworkPortGetNetwork(port: virNetworkPortPtr) -> virNetworkPtr;

    pub fn virNetworkPortGetXMLDesc(
        port: virNetworkPortPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virNetworkPortGetUUID(
        port: virNetworkPortPtr,
        uuid: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkPortGetUUIDString(
        port: virNetworkPortPtr,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkPortSetParameters(
        port: virNetworkPortPtr,
        params: virTypedParameterPtr,
        nparams: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkPortGetParameters(
        port: virNetworkPortPtr,
        params: *mut virTypedParameterPtr,
        nparams: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkPortDelete(
        port: virNetworkPortPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkListAllPorts(
        network: virNetworkPtr,
        ports: *mut *mut virNetworkPortPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNetworkPortFree(port: virNetworkPortPtr) -> ::std::os::raw::c_int;

    pub fn virNetworkPortRef(port: virNetworkPortPtr) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _virNodeDevice(::std::os::raw::c_void);

pub type virNodeDevice = _virNodeDevice;
pub type virNodeDevicePtr = *mut virNodeDevice;
extern "C" {
    pub fn virNodeNumOfDevices(
        conn: virConnectPtr,
        cap: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeListDevices(
        conn: virConnectPtr,
        cap: *const ::std::os::raw::c_char,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM: virConnectListAllNodeDeviceFlags = 1;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV: virConnectListAllNodeDeviceFlags = 2;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV: virConnectListAllNodeDeviceFlags = 4;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE: virConnectListAllNodeDeviceFlags = 8;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET: virConnectListAllNodeDeviceFlags = 16;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST: virConnectListAllNodeDeviceFlags = 32;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET: virConnectListAllNodeDeviceFlags = 64;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI: virConnectListAllNodeDeviceFlags = 128;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE: virConnectListAllNodeDeviceFlags = 256;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST: virConnectListAllNodeDeviceFlags = 512;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS: virConnectListAllNodeDeviceFlags = 1024;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC: virConnectListAllNodeDeviceFlags = 2048;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_DRM: virConnectListAllNodeDeviceFlags = 4096;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV_TYPES: virConnectListAllNodeDeviceFlags = 8192;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV: virConnectListAllNodeDeviceFlags = 16384;
pub const VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCW_DEV: virConnectListAllNodeDeviceFlags = 32768;
pub type virConnectListAllNodeDeviceFlags = u32;
extern "C" {
    pub fn virConnectListAllNodeDevices(
        conn: virConnectPtr,
        devices: *mut *mut virNodeDevicePtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceLookupByName(
        conn: virConnectPtr,
        name: *const ::std::os::raw::c_char,
    ) -> virNodeDevicePtr;

    pub fn virNodeDeviceLookupSCSIHostByWWN(
        conn: virConnectPtr,
        wwnn: *const ::std::os::raw::c_char,
        wwpn: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virNodeDevicePtr;

    pub fn virNodeDeviceGetName(dev: virNodeDevicePtr) -> *const ::std::os::raw::c_char;

    pub fn virNodeDeviceGetParent(dev: virNodeDevicePtr) -> *const ::std::os::raw::c_char;

    pub fn virNodeDeviceNumOfCaps(dev: virNodeDevicePtr) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceListCaps(
        dev: virNodeDevicePtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceGetXMLDesc(
        dev: virNodeDevicePtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virNodeDeviceRef(dev: virNodeDevicePtr) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceFree(dev: virNodeDevicePtr) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceDettach(dev: virNodeDevicePtr) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceDetachFlags(
        dev: virNodeDevicePtr,
        driverName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceReAttach(dev: virNodeDevicePtr) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceReset(dev: virNodeDevicePtr) -> ::std::os::raw::c_int;

    pub fn virNodeDeviceCreateXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virNodeDevicePtr;

    pub fn virNodeDeviceDestroy(dev: virNodeDevicePtr) -> ::std::os::raw::c_int;
}
pub const VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE: virNodeDeviceEventID = 0;
pub const VIR_NODE_DEVICE_EVENT_ID_UPDATE: virNodeDeviceEventID = 1;
pub type virNodeDeviceEventID = u32;
pub type virConnectNodeDeviceEventGenericCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dev: virNodeDevicePtr,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn virConnectNodeDeviceEventRegisterAny(
        conn: virConnectPtr,
        dev: virNodeDevicePtr,
        eventID: ::std::os::raw::c_int,
        cb: virConnectNodeDeviceEventGenericCallback,
        opaque: *mut ::std::os::raw::c_void,
        freecb: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectNodeDeviceEventDeregisterAny(
        conn: virConnectPtr,
        callbackID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_NODE_DEVICE_EVENT_CREATED: virNodeDeviceEventLifecycleType = 0;
pub const VIR_NODE_DEVICE_EVENT_DELETED: virNodeDeviceEventLifecycleType = 1;
pub type virNodeDeviceEventLifecycleType = u32;
pub type virConnectNodeDeviceEventLifecycleCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        dev: virNodeDevicePtr,
        event: ::std::os::raw::c_int,
        detail: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
pub struct _virNWFilter(::std::os::raw::c_void);

pub type virNWFilter = _virNWFilter;
pub type virNWFilterPtr = *mut virNWFilter;
#[repr(C)]
pub struct _virNWFilterBinding(::std::os::raw::c_void);

pub type virNWFilterBinding = _virNWFilterBinding;
pub type virNWFilterBindingPtr = *mut virNWFilterBinding;
extern "C" {
    pub fn virConnectNumOfNWFilters(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListNWFilters(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectListAllNWFilters(
        conn: virConnectPtr,
        filters: *mut *mut virNWFilterPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNWFilterLookupByName(
        conn: virConnectPtr,
        name: *const ::std::os::raw::c_char,
    ) -> virNWFilterPtr;

    pub fn virNWFilterLookupByUUID(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_uchar,
    ) -> virNWFilterPtr;

    pub fn virNWFilterLookupByUUIDString(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_char,
    ) -> virNWFilterPtr;

    pub fn virNWFilterDefineXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
    ) -> virNWFilterPtr;

    pub fn virNWFilterUndefine(nwfilter: virNWFilterPtr) -> ::std::os::raw::c_int;

    pub fn virNWFilterRef(nwfilter: virNWFilterPtr) -> ::std::os::raw::c_int;

    pub fn virNWFilterFree(nwfilter: virNWFilterPtr) -> ::std::os::raw::c_int;

    pub fn virNWFilterGetName(nwfilter: virNWFilterPtr) -> *const ::std::os::raw::c_char;

    pub fn virNWFilterGetUUID(
        nwfilter: virNWFilterPtr,
        uuid: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;

    pub fn virNWFilterGetUUIDString(
        nwfilter: virNWFilterPtr,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virNWFilterGetXMLDesc(
        nwfilter: virNWFilterPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virNWFilterBindingLookupByPortDev(
        conn: virConnectPtr,
        portdev: *const ::std::os::raw::c_char,
    ) -> virNWFilterBindingPtr;

    pub fn virNWFilterBindingGetPortDev(
        binding: virNWFilterBindingPtr,
    ) -> *const ::std::os::raw::c_char;

    pub fn virNWFilterBindingGetFilterName(
        binding: virNWFilterBindingPtr,
    ) -> *const ::std::os::raw::c_char;

    pub fn virConnectListAllNWFilterBindings(
        conn: virConnectPtr,
        bindings: *mut *mut virNWFilterBindingPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virNWFilterBindingCreateXML(
        conn: virConnectPtr,
        xml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virNWFilterBindingPtr;

    pub fn virNWFilterBindingGetXMLDesc(
        binding: virNWFilterBindingPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virNWFilterBindingDelete(binding: virNWFilterBindingPtr) -> ::std::os::raw::c_int;

    pub fn virNWFilterBindingRef(binding: virNWFilterBindingPtr) -> ::std::os::raw::c_int;

    pub fn virNWFilterBindingFree(binding: virNWFilterBindingPtr) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _virSecret(::std::os::raw::c_void);

pub type virSecret = _virSecret;
pub type virSecretPtr = *mut virSecret;
pub const VIR_SECRET_USAGE_TYPE_NONE: virSecretUsageType = 0;
pub const VIR_SECRET_USAGE_TYPE_VOLUME: virSecretUsageType = 1;
pub const VIR_SECRET_USAGE_TYPE_CEPH: virSecretUsageType = 2;
pub const VIR_SECRET_USAGE_TYPE_ISCSI: virSecretUsageType = 3;
pub const VIR_SECRET_USAGE_TYPE_TLS: virSecretUsageType = 4;
pub const VIR_SECRET_USAGE_TYPE_VTPM: virSecretUsageType = 5;
pub type virSecretUsageType = u32;
extern "C" {
    pub fn virSecretGetConnect(secret: virSecretPtr) -> virConnectPtr;

    pub fn virConnectNumOfSecrets(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListSecrets(
        conn: virConnectPtr,
        uuids: *mut *mut ::std::os::raw::c_char,
        maxuuids: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_LIST_SECRETS_EPHEMERAL: virConnectListAllSecretsFlags = 1;
pub const VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL: virConnectListAllSecretsFlags = 2;
pub const VIR_CONNECT_LIST_SECRETS_PRIVATE: virConnectListAllSecretsFlags = 4;
pub const VIR_CONNECT_LIST_SECRETS_NO_PRIVATE: virConnectListAllSecretsFlags = 8;
pub type virConnectListAllSecretsFlags = u32;
extern "C" {
    pub fn virConnectListAllSecrets(
        conn: virConnectPtr,
        secrets: *mut *mut virSecretPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virSecretLookupByUUID(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_uchar,
    ) -> virSecretPtr;

    pub fn virSecretLookupByUUIDString(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_char,
    ) -> virSecretPtr;

    pub fn virSecretLookupByUsage(
        conn: virConnectPtr,
        usageType: ::std::os::raw::c_int,
        usageID: *const ::std::os::raw::c_char,
    ) -> virSecretPtr;

    pub fn virSecretDefineXML(
        conn: virConnectPtr,
        xml: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virSecretPtr;

    pub fn virSecretGetUUID(
        secret: virSecretPtr,
        buf: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;

    pub fn virSecretGetUUIDString(
        secret: virSecretPtr,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virSecretGetUsageType(secret: virSecretPtr) -> ::std::os::raw::c_int;

    pub fn virSecretGetUsageID(secret: virSecretPtr) -> *const ::std::os::raw::c_char;

    pub fn virSecretGetXMLDesc(
        secret: virSecretPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virSecretSetValue(
        secret: virSecretPtr,
        value: *const ::std::os::raw::c_uchar,
        value_size: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virSecretGetValue(
        secret: virSecretPtr,
        value_size: *mut usize,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_uchar;

    pub fn virSecretUndefine(secret: virSecretPtr) -> ::std::os::raw::c_int;

    pub fn virSecretRef(secret: virSecretPtr) -> ::std::os::raw::c_int;

    pub fn virSecretFree(secret: virSecretPtr) -> ::std::os::raw::c_int;
}
pub const VIR_SECRET_EVENT_ID_LIFECYCLE: virSecretEventID = 0;
pub const VIR_SECRET_EVENT_ID_VALUE_CHANGED: virSecretEventID = 1;
pub type virSecretEventID = u32;
pub type virConnectSecretEventGenericCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        secret: virSecretPtr,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn virConnectSecretEventRegisterAny(
        conn: virConnectPtr,
        secret: virSecretPtr,
        eventID: ::std::os::raw::c_int,
        cb: virConnectSecretEventGenericCallback,
        opaque: *mut ::std::os::raw::c_void,
        freecb: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectSecretEventDeregisterAny(
        conn: virConnectPtr,
        callbackID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_SECRET_EVENT_DEFINED: virSecretEventLifecycleType = 0;
pub const VIR_SECRET_EVENT_UNDEFINED: virSecretEventLifecycleType = 1;
pub type virSecretEventLifecycleType = u32;
pub type virConnectSecretEventLifecycleCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        secret: virSecretPtr,
        event: ::std::os::raw::c_int,
        detail: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
pub struct _virStoragePool(::std::os::raw::c_void);

pub type virStoragePool = _virStoragePool;
pub type virStoragePoolPtr = *mut virStoragePool;
pub const VIR_STORAGE_POOL_INACTIVE: virStoragePoolState = 0;
pub const VIR_STORAGE_POOL_BUILDING: virStoragePoolState = 1;
pub const VIR_STORAGE_POOL_RUNNING: virStoragePoolState = 2;
pub const VIR_STORAGE_POOL_DEGRADED: virStoragePoolState = 3;
pub const VIR_STORAGE_POOL_INACCESSIBLE: virStoragePoolState = 4;
pub type virStoragePoolState = u32;
pub const VIR_STORAGE_POOL_BUILD_NEW: virStoragePoolBuildFlags = 0;
pub const VIR_STORAGE_POOL_BUILD_REPAIR: virStoragePoolBuildFlags = 1;
pub const VIR_STORAGE_POOL_BUILD_RESIZE: virStoragePoolBuildFlags = 2;
pub const VIR_STORAGE_POOL_BUILD_NO_OVERWRITE: virStoragePoolBuildFlags = 4;
pub const VIR_STORAGE_POOL_BUILD_OVERWRITE: virStoragePoolBuildFlags = 8;
pub type virStoragePoolBuildFlags = u32;
pub const VIR_STORAGE_POOL_DELETE_NORMAL: virStoragePoolDeleteFlags = 0;
pub const VIR_STORAGE_POOL_DELETE_ZEROED: virStoragePoolDeleteFlags = 1;
pub type virStoragePoolDeleteFlags = u32;
pub const VIR_STORAGE_POOL_CREATE_NORMAL: virStoragePoolCreateFlags = 0;
pub const VIR_STORAGE_POOL_CREATE_WITH_BUILD: virStoragePoolCreateFlags = 1;
pub const VIR_STORAGE_POOL_CREATE_WITH_BUILD_OVERWRITE: virStoragePoolCreateFlags = 2;
pub const VIR_STORAGE_POOL_CREATE_WITH_BUILD_NO_OVERWRITE: virStoragePoolCreateFlags = 4;
pub type virStoragePoolCreateFlags = u32;
pub type virStoragePoolInfo = _virStoragePoolInfo;
#[repr(C)]
pub struct _virStoragePoolInfo {
    pub state: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_ulonglong,
    pub allocation: ::std::os::raw::c_ulonglong,
    pub available: ::std::os::raw::c_ulonglong,
}
pub type virStoragePoolInfoPtr = *mut virStoragePoolInfo;
#[repr(C)]
pub struct _virStorageVol(::std::os::raw::c_void);

pub type virStorageVol = _virStorageVol;
pub type virStorageVolPtr = *mut virStorageVol;
pub const VIR_STORAGE_VOL_FILE: virStorageVolType = 0;
pub const VIR_STORAGE_VOL_BLOCK: virStorageVolType = 1;
pub const VIR_STORAGE_VOL_DIR: virStorageVolType = 2;
pub const VIR_STORAGE_VOL_NETWORK: virStorageVolType = 3;
pub const VIR_STORAGE_VOL_NETDIR: virStorageVolType = 4;
pub const VIR_STORAGE_VOL_PLOOP: virStorageVolType = 5;
pub type virStorageVolType = u32;
pub const VIR_STORAGE_VOL_DELETE_NORMAL: virStorageVolDeleteFlags = 0;
pub const VIR_STORAGE_VOL_DELETE_ZEROED: virStorageVolDeleteFlags = 1;
pub const VIR_STORAGE_VOL_DELETE_WITH_SNAPSHOTS: virStorageVolDeleteFlags = 2;
pub type virStorageVolDeleteFlags = u32;
pub const VIR_STORAGE_VOL_WIPE_ALG_ZERO: virStorageVolWipeAlgorithm = 0;
pub const VIR_STORAGE_VOL_WIPE_ALG_NNSA: virStorageVolWipeAlgorithm = 1;
pub const VIR_STORAGE_VOL_WIPE_ALG_DOD: virStorageVolWipeAlgorithm = 2;
pub const VIR_STORAGE_VOL_WIPE_ALG_BSI: virStorageVolWipeAlgorithm = 3;
pub const VIR_STORAGE_VOL_WIPE_ALG_GUTMANN: virStorageVolWipeAlgorithm = 4;
pub const VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER: virStorageVolWipeAlgorithm = 5;
pub const VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7: virStorageVolWipeAlgorithm = 6;
pub const VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33: virStorageVolWipeAlgorithm = 7;
pub const VIR_STORAGE_VOL_WIPE_ALG_RANDOM: virStorageVolWipeAlgorithm = 8;
pub const VIR_STORAGE_VOL_WIPE_ALG_TRIM: virStorageVolWipeAlgorithm = 9;
pub type virStorageVolWipeAlgorithm = u32;
pub const VIR_STORAGE_VOL_USE_ALLOCATION: virStorageVolInfoFlags = 0;
pub const VIR_STORAGE_VOL_GET_PHYSICAL: virStorageVolInfoFlags = 1;
pub type virStorageVolInfoFlags = u32;
pub type virStorageVolInfo = _virStorageVolInfo;
#[repr(C)]
pub struct _virStorageVolInfo {
    pub type_: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_ulonglong,
    pub allocation: ::std::os::raw::c_ulonglong,
}
pub type virStorageVolInfoPtr = *mut virStorageVolInfo;
pub const VIR_STORAGE_XML_INACTIVE: virStorageXMLFlags = 1;
pub type virStorageXMLFlags = u32;
extern "C" {
    pub fn virStoragePoolGetConnect(pool: virStoragePoolPtr) -> virConnectPtr;

    pub fn virConnectGetStoragePoolCapabilities(
        conn: virConnectPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virConnectNumOfStoragePools(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListStoragePools(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectNumOfDefinedStoragePools(conn: virConnectPtr) -> ::std::os::raw::c_int;

    pub fn virConnectListDefinedStoragePools(
        conn: virConnectPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE: virConnectListAllStoragePoolsFlags = 1;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE: virConnectListAllStoragePoolsFlags = 2;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT: virConnectListAllStoragePoolsFlags = 4;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT: virConnectListAllStoragePoolsFlags = 8;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART: virConnectListAllStoragePoolsFlags = 16;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART: virConnectListAllStoragePoolsFlags = 32;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_DIR: virConnectListAllStoragePoolsFlags = 64;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_FS: virConnectListAllStoragePoolsFlags = 128;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_NETFS: virConnectListAllStoragePoolsFlags = 256;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL: virConnectListAllStoragePoolsFlags = 512;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_DISK: virConnectListAllStoragePoolsFlags = 1024;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI: virConnectListAllStoragePoolsFlags = 2048;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_SCSI: virConnectListAllStoragePoolsFlags = 4096;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_MPATH: virConnectListAllStoragePoolsFlags = 8192;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_RBD: virConnectListAllStoragePoolsFlags = 16384;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG: virConnectListAllStoragePoolsFlags = 32768;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER: virConnectListAllStoragePoolsFlags = 65536;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_ZFS: virConnectListAllStoragePoolsFlags = 131072;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_VSTORAGE: virConnectListAllStoragePoolsFlags = 262144;
pub const VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI_DIRECT: virConnectListAllStoragePoolsFlags = 524288;
pub type virConnectListAllStoragePoolsFlags = u32;
extern "C" {
    pub fn virConnectListAllStoragePools(
        conn: virConnectPtr,
        pools: *mut *mut virStoragePoolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectFindStoragePoolSources(
        conn: virConnectPtr,
        type_: *const ::std::os::raw::c_char,
        srcSpec: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virStoragePoolLookupByName(
        conn: virConnectPtr,
        name: *const ::std::os::raw::c_char,
    ) -> virStoragePoolPtr;

    pub fn virStoragePoolLookupByUUID(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_uchar,
    ) -> virStoragePoolPtr;

    pub fn virStoragePoolLookupByUUIDString(
        conn: virConnectPtr,
        uuid: *const ::std::os::raw::c_char,
    ) -> virStoragePoolPtr;

    pub fn virStoragePoolLookupByVolume(vol: virStorageVolPtr) -> virStoragePoolPtr;

    pub fn virStoragePoolLookupByTargetPath(
        conn: virConnectPtr,
        path: *const ::std::os::raw::c_char,
    ) -> virStoragePoolPtr;

    pub fn virStoragePoolCreateXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virStoragePoolPtr;

    pub fn virStoragePoolDefineXML(
        conn: virConnectPtr,
        xmlDesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virStoragePoolPtr;

    pub fn virStoragePoolBuild(
        pool: virStoragePoolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolUndefine(pool: virStoragePoolPtr) -> ::std::os::raw::c_int;

    pub fn virStoragePoolCreate(
        pool: virStoragePoolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolDestroy(pool: virStoragePoolPtr) -> ::std::os::raw::c_int;

    pub fn virStoragePoolDelete(
        pool: virStoragePoolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolRef(pool: virStoragePoolPtr) -> ::std::os::raw::c_int;

    pub fn virStoragePoolFree(pool: virStoragePoolPtr) -> ::std::os::raw::c_int;

    pub fn virStoragePoolRefresh(
        pool: virStoragePoolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolGetName(pool: virStoragePoolPtr) -> *const ::std::os::raw::c_char;

    pub fn virStoragePoolGetUUID(
        pool: virStoragePoolPtr,
        uuid: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolGetUUIDString(
        pool: virStoragePoolPtr,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolGetInfo(
        vol: virStoragePoolPtr,
        info: virStoragePoolInfoPtr,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolGetXMLDesc(
        pool: virStoragePoolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virStoragePoolGetAutostart(
        pool: virStoragePoolPtr,
        autostart: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolSetAutostart(
        pool: virStoragePoolPtr,
        autostart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolNumOfVolumes(pool: virStoragePoolPtr) -> ::std::os::raw::c_int;

    pub fn virStoragePoolListVolumes(
        pool: virStoragePoolPtr,
        names: *mut *mut ::std::os::raw::c_char,
        maxnames: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolListAllVolumes(
        pool: virStoragePoolPtr,
        vols: *mut *mut virStorageVolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStorageVolGetConnect(vol: virStorageVolPtr) -> virConnectPtr;

    pub fn virStorageVolLookupByName(
        pool: virStoragePoolPtr,
        name: *const ::std::os::raw::c_char,
    ) -> virStorageVolPtr;

    pub fn virStorageVolLookupByKey(
        conn: virConnectPtr,
        key: *const ::std::os::raw::c_char,
    ) -> virStorageVolPtr;

    pub fn virStorageVolLookupByPath(
        conn: virConnectPtr,
        path: *const ::std::os::raw::c_char,
    ) -> virStorageVolPtr;

    pub fn virStorageVolGetName(vol: virStorageVolPtr) -> *const ::std::os::raw::c_char;

    pub fn virStorageVolGetKey(vol: virStorageVolPtr) -> *const ::std::os::raw::c_char;
}
pub const VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA: virStorageVolCreateFlags = 1;
pub const VIR_STORAGE_VOL_CREATE_REFLINK: virStorageVolCreateFlags = 2;
pub type virStorageVolCreateFlags = u32;
extern "C" {
    pub fn virStorageVolCreateXML(
        pool: virStoragePoolPtr,
        xmldesc: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> virStorageVolPtr;

    pub fn virStorageVolCreateXMLFrom(
        pool: virStoragePoolPtr,
        xmldesc: *const ::std::os::raw::c_char,
        clonevol: virStorageVolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> virStorageVolPtr;
}
pub const VIR_STORAGE_VOL_DOWNLOAD_SPARSE_STREAM: virStorageVolDownloadFlags = 1;
pub type virStorageVolDownloadFlags = u32;
extern "C" {
    pub fn virStorageVolDownload(
        vol: virStorageVolPtr,
        stream: virStreamPtr,
        offset: ::std::os::raw::c_ulonglong,
        length: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_STORAGE_VOL_UPLOAD_SPARSE_STREAM: virStorageVolUploadFlags = 1;
pub type virStorageVolUploadFlags = u32;
extern "C" {
    pub fn virStorageVolUpload(
        vol: virStorageVolPtr,
        stream: virStreamPtr,
        offset: ::std::os::raw::c_ulonglong,
        length: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStorageVolDelete(
        vol: virStorageVolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStorageVolWipe(
        vol: virStorageVolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStorageVolWipePattern(
        vol: virStorageVolPtr,
        algorithm: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStorageVolRef(vol: virStorageVolPtr) -> ::std::os::raw::c_int;

    pub fn virStorageVolFree(vol: virStorageVolPtr) -> ::std::os::raw::c_int;

    pub fn virStorageVolGetInfo(
        vol: virStorageVolPtr,
        info: virStorageVolInfoPtr,
    ) -> ::std::os::raw::c_int;

    pub fn virStorageVolGetInfoFlags(
        vol: virStorageVolPtr,
        info: virStorageVolInfoPtr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStorageVolGetXMLDesc(
        pool: virStorageVolPtr,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;

    pub fn virStorageVolGetPath(vol: virStorageVolPtr) -> *mut ::std::os::raw::c_char;
}
pub const VIR_STORAGE_VOL_RESIZE_ALLOCATE: virStorageVolResizeFlags = 1;
pub const VIR_STORAGE_VOL_RESIZE_DELTA: virStorageVolResizeFlags = 2;
pub const VIR_STORAGE_VOL_RESIZE_SHRINK: virStorageVolResizeFlags = 4;
pub type virStorageVolResizeFlags = u32;
extern "C" {
    pub fn virStorageVolResize(
        vol: virStorageVolPtr,
        capacity: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStoragePoolIsActive(pool: virStoragePoolPtr) -> ::std::os::raw::c_int;

    pub fn virStoragePoolIsPersistent(pool: virStoragePoolPtr) -> ::std::os::raw::c_int;
}
pub const VIR_STORAGE_POOL_EVENT_ID_LIFECYCLE: virStoragePoolEventID = 0;
pub const VIR_STORAGE_POOL_EVENT_ID_REFRESH: virStoragePoolEventID = 1;
pub type virStoragePoolEventID = u32;
pub type virConnectStoragePoolEventGenericCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        pool: virStoragePoolPtr,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn virConnectStoragePoolEventRegisterAny(
        conn: virConnectPtr,
        pool: virStoragePoolPtr,
        eventID: ::std::os::raw::c_int,
        cb: virConnectStoragePoolEventGenericCallback,
        opaque: *mut ::std::os::raw::c_void,
        freecb: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virConnectStoragePoolEventDeregisterAny(
        conn: virConnectPtr,
        callbackID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_STORAGE_POOL_EVENT_DEFINED: virStoragePoolEventLifecycleType = 0;
pub const VIR_STORAGE_POOL_EVENT_UNDEFINED: virStoragePoolEventLifecycleType = 1;
pub const VIR_STORAGE_POOL_EVENT_STARTED: virStoragePoolEventLifecycleType = 2;
pub const VIR_STORAGE_POOL_EVENT_STOPPED: virStoragePoolEventLifecycleType = 3;
pub const VIR_STORAGE_POOL_EVENT_CREATED: virStoragePoolEventLifecycleType = 4;
pub const VIR_STORAGE_POOL_EVENT_DELETED: virStoragePoolEventLifecycleType = 5;
pub type virStoragePoolEventLifecycleType = u32;
pub type virConnectStoragePoolEventLifecycleCallback = Option<
    unsafe extern "C" fn(
        conn: virConnectPtr,
        pool: virStoragePoolPtr,
        event: ::std::os::raw::c_int,
        detail: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
pub const VIR_STREAM_NONBLOCK: virStreamFlags = 1;
pub type virStreamFlags = u32;
extern "C" {
    pub fn virStreamNew(conn: virConnectPtr, flags: ::std::os::raw::c_uint) -> virStreamPtr;

    pub fn virStreamRef(st: virStreamPtr) -> ::std::os::raw::c_int;

    pub fn virStreamSend(
        st: virStreamPtr,
        data: *const ::std::os::raw::c_char,
        nbytes: usize,
    ) -> ::std::os::raw::c_int;

    pub fn virStreamRecv(
        st: virStreamPtr,
        data: *mut ::std::os::raw::c_char,
        nbytes: usize,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_STREAM_RECV_STOP_AT_HOLE: virStreamRecvFlagsValues = 1;
pub type virStreamRecvFlagsValues = u32;
extern "C" {
    pub fn virStreamRecvFlags(
        st: virStreamPtr,
        data: *mut ::std::os::raw::c_char,
        nbytes: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStreamSendHole(
        st: virStreamPtr,
        length: ::std::os::raw::c_longlong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;

    pub fn virStreamRecvHole(
        arg1: virStreamPtr,
        length: *mut ::std::os::raw::c_longlong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type virStreamSourceFunc = Option<
    unsafe extern "C" fn(
        st: virStreamPtr,
        data: *mut ::std::os::raw::c_char,
        nbytes: usize,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn virStreamSendAll(
        st: virStreamPtr,
        handler: virStreamSourceFunc,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type virStreamSourceHoleFunc = Option<
    unsafe extern "C" fn(
        st: virStreamPtr,
        inData: *mut ::std::os::raw::c_int,
        length: *mut ::std::os::raw::c_longlong,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type virStreamSourceSkipFunc = Option<
    unsafe extern "C" fn(
        st: virStreamPtr,
        length: ::std::os::raw::c_longlong,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn virStreamSparseSendAll(
        st: virStreamPtr,
        handler: virStreamSourceFunc,
        holeHandler: virStreamSourceHoleFunc,
        skipHandler: virStreamSourceSkipFunc,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type virStreamSinkFunc = Option<
    unsafe extern "C" fn(
        st: virStreamPtr,
        data: *const ::std::os::raw::c_char,
        nbytes: usize,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn virStreamRecvAll(
        st: virStreamPtr,
        handler: virStreamSinkFunc,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type virStreamSinkHoleFunc = Option<
    unsafe extern "C" fn(
        st: virStreamPtr,
        length: ::std::os::raw::c_longlong,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn virStreamSparseRecvAll(
        stream: virStreamPtr,
        handler: virStreamSinkFunc,
        holeHandler: virStreamSinkHoleFunc,
        opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const VIR_STREAM_EVENT_READABLE: virStreamEventType = 1;
pub const VIR_STREAM_EVENT_WRITABLE: virStreamEventType = 2;
pub const VIR_STREAM_EVENT_ERROR: virStreamEventType = 4;
pub const VIR_STREAM_EVENT_HANGUP: virStreamEventType = 8;
pub type virStreamEventType = u32;
pub type virStreamEventCallback = Option<
    unsafe extern "C" fn(
        stream: virStreamPtr,
        events: ::std::os::raw::c_int,
        opaque: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn virStreamEventAddCallback(
        stream: virStreamPtr,
        events: ::std::os::raw::c_int,
        cb: virStreamEventCallback,
        opaque: *mut ::std::os::raw::c_void,
        ff: virFreeCallback,
    ) -> ::std::os::raw::c_int;

    pub fn virStreamEventUpdateCallback(
        stream: virStreamPtr,
        events: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn virStreamEventRemoveCallback(stream: virStreamPtr) -> ::std::os::raw::c_int;

    pub fn virStreamFinish(st: virStreamPtr) -> ::std::os::raw::c_int;

    pub fn virStreamAbort(st: virStreamPtr) -> ::std::os::raw::c_int;

    pub fn virStreamFree(st: virStreamPtr) -> ::std::os::raw::c_int;
}
pub const VIR_ERR_NONE: virErrorLevel = 0;
pub const VIR_ERR_WARNING: virErrorLevel = 1;
pub const VIR_ERR_ERROR: virErrorLevel = 2;
pub type virErrorLevel = u32;
pub const VIR_FROM_NONE: virErrorDomain = 0;
pub const VIR_FROM_XEN: virErrorDomain = 1;
pub const VIR_FROM_XEND: virErrorDomain = 2;
pub const VIR_FROM_XENSTORE: virErrorDomain = 3;
pub const VIR_FROM_SEXPR: virErrorDomain = 4;
pub const VIR_FROM_XML: virErrorDomain = 5;
pub const VIR_FROM_DOM: virErrorDomain = 6;
pub const VIR_FROM_RPC: virErrorDomain = 7;
pub const VIR_FROM_PROXY: virErrorDomain = 8;
pub const VIR_FROM_CONF: virErrorDomain = 9;
pub const VIR_FROM_QEMU: virErrorDomain = 10;
pub const VIR_FROM_NET: virErrorDomain = 11;
pub const VIR_FROM_TEST: virErrorDomain = 12;
pub const VIR_FROM_REMOTE: virErrorDomain = 13;
pub const VIR_FROM_OPENVZ: virErrorDomain = 14;
pub const VIR_FROM_XENXM: virErrorDomain = 15;
pub const VIR_FROM_STATS_LINUX: virErrorDomain = 16;
pub const VIR_FROM_LXC: virErrorDomain = 17;
pub const VIR_FROM_STORAGE: virErrorDomain = 18;
pub const VIR_FROM_NETWORK: virErrorDomain = 19;
pub const VIR_FROM_DOMAIN: virErrorDomain = 20;
pub const VIR_FROM_UML: virErrorDomain = 21;
pub const VIR_FROM_NODEDEV: virErrorDomain = 22;
pub const VIR_FROM_XEN_INOTIFY: virErrorDomain = 23;
pub const VIR_FROM_SECURITY: virErrorDomain = 24;
pub const VIR_FROM_VBOX: virErrorDomain = 25;
pub const VIR_FROM_INTERFACE: virErrorDomain = 26;
pub const VIR_FROM_ONE: virErrorDomain = 27;
pub const VIR_FROM_ESX: virErrorDomain = 28;
pub const VIR_FROM_PHYP: virErrorDomain = 29;
pub const VIR_FROM_SECRET: virErrorDomain = 30;
pub const VIR_FROM_CPU: virErrorDomain = 31;
pub const VIR_FROM_XENAPI: virErrorDomain = 32;
pub const VIR_FROM_NWFILTER: virErrorDomain = 33;
pub const VIR_FROM_HOOK: virErrorDomain = 34;
pub const VIR_FROM_DOMAIN_SNAPSHOT: virErrorDomain = 35;
pub const VIR_FROM_AUDIT: virErrorDomain = 36;
pub const VIR_FROM_SYSINFO: virErrorDomain = 37;
pub const VIR_FROM_STREAMS: virErrorDomain = 38;
pub const VIR_FROM_VMWARE: virErrorDomain = 39;
pub const VIR_FROM_EVENT: virErrorDomain = 40;
pub const VIR_FROM_LIBXL: virErrorDomain = 41;
pub const VIR_FROM_LOCKING: virErrorDomain = 42;
pub const VIR_FROM_HYPERV: virErrorDomain = 43;
pub const VIR_FROM_CAPABILITIES: virErrorDomain = 44;
pub const VIR_FROM_URI: virErrorDomain = 45;
pub const VIR_FROM_AUTH: virErrorDomain = 46;
pub const VIR_FROM_DBUS: virErrorDomain = 47;
pub const VIR_FROM_PARALLELS: virErrorDomain = 48;
pub const VIR_FROM_DEVICE: virErrorDomain = 49;
pub const VIR_FROM_SSH: virErrorDomain = 50;
pub const VIR_FROM_LOCKSPACE: virErrorDomain = 51;
pub const VIR_FROM_INITCTL: virErrorDomain = 52;
pub const VIR_FROM_IDENTITY: virErrorDomain = 53;
pub const VIR_FROM_CGROUP: virErrorDomain = 54;
pub const VIR_FROM_ACCESS: virErrorDomain = 55;
pub const VIR_FROM_SYSTEMD: virErrorDomain = 56;
pub const VIR_FROM_BHYVE: virErrorDomain = 57;
pub const VIR_FROM_CRYPTO: virErrorDomain = 58;
pub const VIR_FROM_FIREWALL: virErrorDomain = 59;
pub const VIR_FROM_POLKIT: virErrorDomain = 60;
pub const VIR_FROM_THREAD: virErrorDomain = 61;
pub const VIR_FROM_ADMIN: virErrorDomain = 62;
pub const VIR_FROM_LOGGING: virErrorDomain = 63;
pub const VIR_FROM_XENXL: virErrorDomain = 64;
pub const VIR_FROM_PERF: virErrorDomain = 65;
pub const VIR_FROM_LIBSSH: virErrorDomain = 66;
pub const VIR_FROM_RESCTRL: virErrorDomain = 67;
pub const VIR_FROM_FIREWALLD: virErrorDomain = 68;
pub const VIR_FROM_DOMAIN_CHECKPOINT: virErrorDomain = 69;
pub const VIR_FROM_TPM: virErrorDomain = 70;
pub type virErrorDomain = u32;
pub type virError = _virError;
pub type virErrorPtr = *mut virError;
#[repr(C)]
pub struct _virError {
    pub code: ::std::os::raw::c_int,
    pub domain: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
    pub level: virErrorLevel,
    pub conn: virConnectPtr,
    pub dom: virDomainPtr,
    pub str1: *mut ::std::os::raw::c_char,
    pub str2: *mut ::std::os::raw::c_char,
    pub str3: *mut ::std::os::raw::c_char,
    pub int1: ::std::os::raw::c_int,
    pub int2: ::std::os::raw::c_int,
    pub net: virNetworkPtr,
}
pub const VIR_ERR_OK: virErrorNumber = 0;
pub const VIR_ERR_INTERNAL_ERROR: virErrorNumber = 1;
pub const VIR_ERR_NO_MEMORY: virErrorNumber = 2;
pub const VIR_ERR_NO_SUPPORT: virErrorNumber = 3;
pub const VIR_ERR_UNKNOWN_HOST: virErrorNumber = 4;
pub const VIR_ERR_NO_CONNECT: virErrorNumber = 5;
pub const VIR_ERR_INVALID_CONN: virErrorNumber = 6;
pub const VIR_ERR_INVALID_DOMAIN: virErrorNumber = 7;
pub const VIR_ERR_INVALID_ARG: virErrorNumber = 8;
pub const VIR_ERR_OPERATION_FAILED: virErrorNumber = 9;
pub const VIR_ERR_GET_FAILED: virErrorNumber = 10;
pub const VIR_ERR_POST_FAILED: virErrorNumber = 11;
pub const VIR_ERR_HTTP_ERROR: virErrorNumber = 12;
pub const VIR_ERR_SEXPR_SERIAL: virErrorNumber = 13;
pub const VIR_ERR_NO_XEN: virErrorNumber = 14;
pub const VIR_ERR_XEN_CALL: virErrorNumber = 15;
pub const VIR_ERR_OS_TYPE: virErrorNumber = 16;
pub const VIR_ERR_NO_KERNEL: virErrorNumber = 17;
pub const VIR_ERR_NO_ROOT: virErrorNumber = 18;
pub const VIR_ERR_NO_SOURCE: virErrorNumber = 19;
pub const VIR_ERR_NO_TARGET: virErrorNumber = 20;
pub const VIR_ERR_NO_NAME: virErrorNumber = 21;
pub const VIR_ERR_NO_OS: virErrorNumber = 22;
pub const VIR_ERR_NO_DEVICE: virErrorNumber = 23;
pub const VIR_ERR_NO_XENSTORE: virErrorNumber = 24;
pub const VIR_ERR_DRIVER_FULL: virErrorNumber = 25;
pub const VIR_ERR_CALL_FAILED: virErrorNumber = 26;
pub const VIR_ERR_XML_ERROR: virErrorNumber = 27;
pub const VIR_ERR_DOM_EXIST: virErrorNumber = 28;
pub const VIR_ERR_OPERATION_DENIED: virErrorNumber = 29;
pub const VIR_ERR_OPEN_FAILED: virErrorNumber = 30;
pub const VIR_ERR_READ_FAILED: virErrorNumber = 31;
pub const VIR_ERR_PARSE_FAILED: virErrorNumber = 32;
pub const VIR_ERR_CONF_SYNTAX: virErrorNumber = 33;
pub const VIR_ERR_WRITE_FAILED: virErrorNumber = 34;
pub const VIR_ERR_XML_DETAIL: virErrorNumber = 35;
pub const VIR_ERR_INVALID_NETWORK: virErrorNumber = 36;
pub const VIR_ERR_NETWORK_EXIST: virErrorNumber = 37;
pub const VIR_ERR_SYSTEM_ERROR: virErrorNumber = 38;
pub const VIR_ERR_RPC: virErrorNumber = 39;
pub const VIR_ERR_GNUTLS_ERROR: virErrorNumber = 40;
pub const VIR_WAR_NO_NETWORK: virErrorNumber = 41;
pub const VIR_ERR_NO_DOMAIN: virErrorNumber = 42;
pub const VIR_ERR_NO_NETWORK: virErrorNumber = 43;
pub const VIR_ERR_INVALID_MAC: virErrorNumber = 44;
pub const VIR_ERR_AUTH_FAILED: virErrorNumber = 45;
pub const VIR_ERR_INVALID_STORAGE_POOL: virErrorNumber = 46;
pub const VIR_ERR_INVALID_STORAGE_VOL: virErrorNumber = 47;
pub const VIR_WAR_NO_STORAGE: virErrorNumber = 48;
pub const VIR_ERR_NO_STORAGE_POOL: virErrorNumber = 49;
pub const VIR_ERR_NO_STORAGE_VOL: virErrorNumber = 50;
pub const VIR_WAR_NO_NODE: virErrorNumber = 51;
pub const VIR_ERR_INVALID_NODE_DEVICE: virErrorNumber = 52;
pub const VIR_ERR_NO_NODE_DEVICE: virErrorNumber = 53;
pub const VIR_ERR_NO_SECURITY_MODEL: virErrorNumber = 54;
pub const VIR_ERR_OPERATION_INVALID: virErrorNumber = 55;
pub const VIR_WAR_NO_INTERFACE: virErrorNumber = 56;
pub const VIR_ERR_NO_INTERFACE: virErrorNumber = 57;
pub const VIR_ERR_INVALID_INTERFACE: virErrorNumber = 58;
pub const VIR_ERR_MULTIPLE_INTERFACES: virErrorNumber = 59;
pub const VIR_WAR_NO_NWFILTER: virErrorNumber = 60;
pub const VIR_ERR_INVALID_NWFILTER: virErrorNumber = 61;
pub const VIR_ERR_NO_NWFILTER: virErrorNumber = 62;
pub const VIR_ERR_BUILD_FIREWALL: virErrorNumber = 63;
pub const VIR_WAR_NO_SECRET: virErrorNumber = 64;
pub const VIR_ERR_INVALID_SECRET: virErrorNumber = 65;
pub const VIR_ERR_NO_SECRET: virErrorNumber = 66;
pub const VIR_ERR_CONFIG_UNSUPPORTED: virErrorNumber = 67;
pub const VIR_ERR_OPERATION_TIMEOUT: virErrorNumber = 68;
pub const VIR_ERR_MIGRATE_PERSIST_FAILED: virErrorNumber = 69;
pub const VIR_ERR_HOOK_SCRIPT_FAILED: virErrorNumber = 70;
pub const VIR_ERR_INVALID_DOMAIN_SNAPSHOT: virErrorNumber = 71;
pub const VIR_ERR_NO_DOMAIN_SNAPSHOT: virErrorNumber = 72;
pub const VIR_ERR_INVALID_STREAM: virErrorNumber = 73;
pub const VIR_ERR_ARGUMENT_UNSUPPORTED: virErrorNumber = 74;
pub const VIR_ERR_STORAGE_PROBE_FAILED: virErrorNumber = 75;
pub const VIR_ERR_STORAGE_POOL_BUILT: virErrorNumber = 76;
pub const VIR_ERR_SNAPSHOT_REVERT_RISKY: virErrorNumber = 77;
pub const VIR_ERR_OPERATION_ABORTED: virErrorNumber = 78;
pub const VIR_ERR_AUTH_CANCELLED: virErrorNumber = 79;
pub const VIR_ERR_NO_DOMAIN_METADATA: virErrorNumber = 80;
pub const VIR_ERR_MIGRATE_UNSAFE: virErrorNumber = 81;
pub const VIR_ERR_OVERFLOW: virErrorNumber = 82;
pub const VIR_ERR_BLOCK_COPY_ACTIVE: virErrorNumber = 83;
pub const VIR_ERR_OPERATION_UNSUPPORTED: virErrorNumber = 84;
pub const VIR_ERR_SSH: virErrorNumber = 85;
pub const VIR_ERR_AGENT_UNRESPONSIVE: virErrorNumber = 86;
pub const VIR_ERR_RESOURCE_BUSY: virErrorNumber = 87;
pub const VIR_ERR_ACCESS_DENIED: virErrorNumber = 88;
pub const VIR_ERR_DBUS_SERVICE: virErrorNumber = 89;
pub const VIR_ERR_STORAGE_VOL_EXIST: virErrorNumber = 90;
pub const VIR_ERR_CPU_INCOMPATIBLE: virErrorNumber = 91;
pub const VIR_ERR_XML_INVALID_SCHEMA: virErrorNumber = 92;
pub const VIR_ERR_MIGRATE_FINISH_OK: virErrorNumber = 93;
pub const VIR_ERR_AUTH_UNAVAILABLE: virErrorNumber = 94;
pub const VIR_ERR_NO_SERVER: virErrorNumber = 95;
pub const VIR_ERR_NO_CLIENT: virErrorNumber = 96;
pub const VIR_ERR_AGENT_UNSYNCED: virErrorNumber = 97;
pub const VIR_ERR_LIBSSH: virErrorNumber = 98;
pub const VIR_ERR_DEVICE_MISSING: virErrorNumber = 99;
pub const VIR_ERR_INVALID_NWFILTER_BINDING: virErrorNumber = 100;
pub const VIR_ERR_NO_NWFILTER_BINDING: virErrorNumber = 101;
pub const VIR_ERR_INVALID_DOMAIN_CHECKPOINT: virErrorNumber = 102;
pub const VIR_ERR_NO_DOMAIN_CHECKPOINT: virErrorNumber = 103;
pub const VIR_ERR_NO_DOMAIN_BACKUP: virErrorNumber = 104;
pub const VIR_ERR_INVALID_NETWORK_PORT: virErrorNumber = 105;
pub const VIR_ERR_NETWORK_PORT_EXIST: virErrorNumber = 106;
pub const VIR_ERR_NO_NETWORK_PORT: virErrorNumber = 107;
pub type virErrorNumber = u32;
pub type virErrorFunc =
    Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, error: virErrorPtr)>;
extern "C" {
    pub fn virGetLastError() -> virErrorPtr;

    pub fn virSaveLastError() -> virErrorPtr;

    pub fn virResetLastError();

    pub fn virResetError(err: virErrorPtr);

    pub fn virFreeError(err: virErrorPtr);

    pub fn virGetLastErrorCode() -> ::std::os::raw::c_int;

    pub fn virGetLastErrorDomain() -> ::std::os::raw::c_int;

    pub fn virGetLastErrorMessage() -> *const ::std::os::raw::c_char;

    pub fn virConnGetLastError(conn: virConnectPtr) -> virErrorPtr;

    pub fn virConnResetLastError(conn: virConnectPtr);

    pub fn virCopyLastError(to: virErrorPtr) -> ::std::os::raw::c_int;

    pub fn virDefaultErrorFunc(err: virErrorPtr);

    pub fn virSetErrorFunc(userData: *mut ::std::os::raw::c_void, handler: virErrorFunc);

    pub fn virConnSetErrorFunc(
        conn: virConnectPtr,
        userData: *mut ::std::os::raw::c_void,
        handler: virErrorFunc,
    );

    pub fn virConnCopyLastError(conn: virConnectPtr, to: virErrorPtr) -> ::std::os::raw::c_int;
}
